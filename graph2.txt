<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , <org.apache.commons.csv.CSVParser: boolean isClosed()>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> , <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , <org.apache.commons.csv.ExtendedBufferedReader: int read()>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , <org.apache.commons.csv.Lexer: boolean isClosed()>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , <org.apache.commons.csv.Token: void reset()>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , <org.apache.commons.csv.Lexer: long getCharacterPosition()>
<org.apache.commons.csv.Lexer: boolean isClosed()> , <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isDelimiter(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isCommentStart(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>
<org.apache.commons.csv.CSVParser: void close()> , <org.apache.commons.csv.Lexer: void close()>
<org.apache.commons.csv.Lexer: void close()> , <org.apache.commons.csv.ExtendedBufferedReader: void close()>
<org.apache.commons.csv.CSVPrinter: void close()> , <org.apache.commons.csv.CSVPrinter: void close(boolean)>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: long getCurrentLineNumber()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: int readEscape()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , <org.apache.commons.csv.Lexer: boolean isEscape(int)>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , <org.apache.commons.csv.CSVFormat: boolean getTrim()>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , <org.apache.commons.csv.CSVPrinter: void flush()>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>
<org.apache.commons.csv.Lexer: int readEscape()> , <org.apache.commons.csv.Lexer: boolean isMetaChar(int)>
