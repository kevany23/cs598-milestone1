<org.apache.commons.csv.CSVFormat: int hashCode()> , r0 := @this: org.apache.commons.csv.CSVFormat , b0 = 31
<org.apache.commons.csv.CSVFormat: int hashCode()> , b0 = 31 , b8 = 1
<org.apache.commons.csv.CSVFormat: int hashCode()> , b8 = 1 , $i1 = 31 * b8
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i1 = 31 * b8 , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1) , i9 = $i1 + $i2
<org.apache.commons.csv.CSVFormat: int hashCode()> , i9 = $i1 + $i2 , $i3 = 31 * i9
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i3 = 31 * i9 , $r2 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r2 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $i4 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i4 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2) , i10 = $i3 + $i4
<org.apache.commons.csv.CSVFormat: int hashCode()> , i10 = $i3 + $i4 , $i5 = 31 * i10
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i5 = 31 * i10 , $r3 = newarray (java.lang.Object)[17]
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3 = newarray (java.lang.Object)[17] , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames> , $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) , $r3[0] = $r4
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[0] = $r4 , $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames> , $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) , $r3[1] = $r5
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[1] = $r5 , $z2 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z2 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush> , $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) , $r3[2] = $r6
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[2] = $r6 , $r7 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r7 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r3[3] = $r7
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[3] = $r7 , $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r3[4] = $r8
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[4] = $r8 , $r9 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r9 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r3[5] = $r9
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[5] = $r9 , $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines> , $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3) , $r3[6] = $r10
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[6] = $r10 , $z4 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z4 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase> , $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4) , $r3[7] = $r11
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[7] = $r11 , $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces> , $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5) , $r3[8] = $r12
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[8] = $r12 , $r13 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r13 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r3[9] = $r13
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[9] = $r13 , $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r3[10] = $r14
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[10] = $r14 , $r15 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r15 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r3[11] = $r15
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[11] = $r15 , $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString> , $r3[12] = $r16
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[12] = $r16 , $r17 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r17 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r3[13] = $r17
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[13] = $r17 , $z6 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z6 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6) , $r3[14] = $r18
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[14] = $r18 , $z7 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z7 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter> , $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7) , $r3[15] = $r19
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[15] = $r19 , $z8 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
<org.apache.commons.csv.CSVFormat: int hashCode()> , $z8 = r0.<org.apache.commons.csv.CSVFormat: boolean trim> , $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8) , $r3[16] = $r20
<org.apache.commons.csv.CSVFormat: int hashCode()> , $r3[16] = $r20 , $i6 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r3)
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i6 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r3) , $i7 = $i5 + $i6
<org.apache.commons.csv.CSVFormat: int hashCode()> , $i7 = $i5 + $i6 , return $i7
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , r0 := @this: org.apache.commons.csv.CSVFormat , r1 := @parameter0: java.lang.Object
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , r1 := @parameter0: java.lang.Object , if r0 != r1 goto (branch)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if r0 != r1 goto (branch) , return 1
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if r0 != r1 goto (branch) , if r1 == null goto return 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if r1 == null goto return 0 , $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if r1 == null goto return 0 , return 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() , $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() , if $r2 == $r3 goto r4 = (org.apache.commons.csv.CSVFormat) r1
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $r2 == $r3 goto r4 = (org.apache.commons.csv.CSVFormat) r1 , return 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $r2 == $r3 goto r4 = (org.apache.commons.csv.CSVFormat) r1 , r4 = (org.apache.commons.csv.CSVFormat) r1
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , r4 = (org.apache.commons.csv.CSVFormat) r1 , $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames> , $z0 = r4.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z0 = r4.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames> , if $z1 != $z0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z1 != $z0 goto $z27 = 0 , $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z1 != $z0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames> , $z2 = r4.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z2 = r4.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames> , if $z3 != $z2 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z3 != $z2 goto $z27 = 0 , $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z3 != $z2 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush> , $z4 = r4.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z4 = r4.<org.apache.commons.csv.CSVFormat: boolean autoFlush> , if $z5 != $z4 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z5 != $z4 goto $z27 = 0 , $r6 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z5 != $z4 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r6 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r5 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r5 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5) , if $z6 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z6 == 0 goto $z27 = 0 , $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z6 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r7 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r7 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7) , if $z7 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z7 == 0 goto $z27 = 0 , $r10 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z7 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r10 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r9 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r9 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $z8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9) , if $z8 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z8 == 0 goto $z27 = 0 , $r12 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z8 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r12 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r11 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r11 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11) , if $z9 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z9 == 0 goto $z27 = 0 , $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z9 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r13 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r13 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $z10 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r14, $r13)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z10 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r14, $r13) , if $z10 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z10 == 0 goto $z27 = 0 , $z12 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z10 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z12 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines> , $z11 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z11 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines> , if $z12 != $z11 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z12 != $z11 goto $z27 = 0 , $z14 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z12 != $z11 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z14 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase> , $z13 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z13 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase> , if $z14 != $z13 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z14 != $z13 goto $z27 = 0 , $z16 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z14 != $z13 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z16 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces> , $z15 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z15 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces> , if $z16 != $z15 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z16 != $z15 goto $z27 = 0 , $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z16 != $z15 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r15 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r15 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $z17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15) , if $z17 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z17 == 0 goto $z27 = 0 , $r18 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z17 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r18 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r17 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r17 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $z18 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, $r17)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z18 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, $r17) , if $z18 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z18 == 0 goto $z27 = 0 , $r20 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z18 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r20 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r19 = r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r19 = r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r20 != $r19 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $r20 != $r19 goto $z27 = 0 , $r22 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $r20 != $r19 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r22 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString> , $r21 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r21 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString> , $z19 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r22, $r21)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z19 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r22, $r21) , if $z19 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z19 == 0 goto $z27 = 0 , $r24 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z19 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r24 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r23 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $r23 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $z20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r24, $r23)
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r24, $r23) , if $z20 == 0 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z20 == 0 goto $z27 = 0 , $z22 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z20 == 0 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z22 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , $z21 = r4.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z21 = r4.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , if $z22 != $z21 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z22 != $z21 goto $z27 = 0 , $z24 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z22 != $z21 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z24 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter> , $z23 = r4.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z23 = r4.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter> , if $z24 != $z23 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z24 != $z23 goto $z27 = 0 , $z26 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z24 != $z23 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z26 = r0.<org.apache.commons.csv.CSVFormat: boolean trim> , $z25 = r4.<org.apache.commons.csv.CSVFormat: boolean trim>
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z25 = r4.<org.apache.commons.csv.CSVFormat: boolean trim> , if $z26 != $z25 goto $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z26 != $z25 goto $z27 = 0 , $z27 = 1
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , if $z26 != $z25 goto $z27 = 0 , $z27 = 0
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z27 = 1 , goto [?= return $z27]
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , goto [?= return $z27] , return $z27
<org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> , $z27 = 0 , return $z27
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>() , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , return 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>() , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4 , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r3 == null goto $z1 = 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $r3 == null goto $z1 = 0 , $z1 = 1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , if $r3 == null goto $z1 = 0 , $z1 = 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $z1 = 1 , goto [?= return $z1]
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , goto [?= return $z1] , return $z1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> , $z1 = 0 , return $z1
<org.apache.commons.csv.CSVParser: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
<org.apache.commons.csv.CSVParser: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>() , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , return 0
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>() , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
<org.apache.commons.csv.CSVParser: boolean isClosed()> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4 , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r3 == null goto $z1 = 0
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $r3 == null goto $z1 = 0 , $z1 = 1
<org.apache.commons.csv.CSVParser: boolean isClosed()> , if $r3 == null goto $z1 = 0 , $z1 = 0
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $z1 = 1 , goto [?= return $z1]
<org.apache.commons.csv.CSVParser: boolean isClosed()> , goto [?= return $z1] , return $z1
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $z1 = 0 , return $z1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>() , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , return 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>() , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4 , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , if $r3 == null goto $z1 = 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $r3 == null goto $z1 = 0 , $z1 = 1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , if $r3 == null goto $z1 = 0 , $z1 = 0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $z1 = 1 , goto [?= return $z1]
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , goto [?= return $z1] , return $z1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $z1 = 0 , return $z1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> , $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>() , return $r1
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>() , return $r1
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: java.lang.String toString()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , r3 := @this: org.apache.commons.csv.CSVFormat
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , r3 := @this: org.apache.commons.csv.CSVFormat , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , r1 = $r0
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , r1 = $r0 , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<") , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>() , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<") , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54) , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>() , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<") , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<") , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>() , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<") , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39) , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>() , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<") , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<") , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62) , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>() , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored") , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>() , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored") , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>() , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored") , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:") , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7) , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:") , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21) , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:") , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16) , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() , return $r13
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , r2 := @this: org.apache.commons.csv.CSVRecord , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CSVRecord [comment=\'")
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CSVRecord [comment=\'") , $r3 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String comment>
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r3 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String comment> , $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) , $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', recordNumber=")
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', recordNumber=") , $l0 = r2.<org.apache.commons.csv.CSVRecord: long recordNumber>
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $l0 = r2.<org.apache.commons.csv.CSVRecord: long recordNumber> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", values=")
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", values=") , $r8 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String[] values>
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r8 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String[] values> , $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r8)
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r8) , $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) , $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") , $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVRecord: java.lang.String toString()> , $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() , return $r12
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if $i0 != -1 goto $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , return null
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , $r1 = new java.lang.StringBuilder , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() , r2 = $r1
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , r2 = $r1 , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 != 13 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 != 13 goto (branch) , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 != 13 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if i3 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i3 != 10 goto (branch) , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i3 != 10 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 != 13 goto $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 != 13 goto $c2 = (char) i1 , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , if i1 != 13 goto $c2 = (char) i1 , $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()] , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , $c2 = (char) i1 , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()] , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , return $r4
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if $i0 != -1 goto $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , return null
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , $r1 = new java.lang.StringBuilder , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() , r2 = $r1
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , r2 = $r1 , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 != 13 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 != 13 goto (branch) , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 != 13 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if i3 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i3 != 10 goto (branch) , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i3 != 10 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 != 13 goto $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 != 13 goto $c2 = (char) i1 , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , if i1 != 13 goto $c2 = (char) i1 , $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()] , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , $c2 = (char) i1 , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()] , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , return $r4
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if $i0 != -1 goto $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , return null
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i0 != -1 goto $r1 = new java.lang.StringBuilder , $r1 = new java.lang.StringBuilder
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $r1 = new java.lang.StringBuilder , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() , r2 = $r1
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r2 = $r1 , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 != 13 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 != 13 goto (branch) , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 != 13 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if i3 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i3 != 10 goto (branch) , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i3 != 10 goto (branch) , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , if i1 != 13 goto $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 != 13 goto $c2 = (char) i1 , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i1 != 13 goto $c2 = (char) i1 , $c2 = (char) i1
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()] , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $c2 = (char) i1 , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()] , i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() , return $r4
<org.apache.commons.csv.CSVParser: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>() , return $z0
<org.apache.commons.csv.Lexer: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.Lexer: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
<org.apache.commons.csv.Lexer: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>() , return $z0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>() , return $r2
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r3 := @caughtexception , r4 = $r3
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r4 = $r3 , $r5 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r5 = new java.lang.IllegalStateException , $r6 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r6 = new java.lang.StringBuilder , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>() , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ") , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>() , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4) , throw $r5
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r3 := @caughtexception
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>() , return $r2
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r3 := @caughtexception , r4 = $r3
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r4 = $r3 , $r5 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r5 = new java.lang.IllegalStateException , $r6 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r6 = new java.lang.StringBuilder , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>() , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ") , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>() , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4) , throw $r5
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r38 = $r18 , return r38
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r38 = $r18 , return r38
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r38 = $r18 , return r38
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r38 = $r18 , return r38
<org.apache.commons.csv.Token: void reset()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.Token: void reset()> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.Token: void reset()> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Token: void reset()> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.Token: void reset()> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.Token: void reset()> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Token: void reset()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.Token: void reset()> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.Token: void reset()> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.Token: void reset()> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.Token: void reset()> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Token: void reset()> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.Token: void reset()> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.Token: void reset()> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Token: void reset()> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.Token: void reset()> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.Token: void reset()> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Token: void reset()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.Token: void reset()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Token: void reset()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Token: void reset()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.Token: void reset()> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Token: void reset()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Token: void reset()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.Token: void reset()> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Token: void reset()> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.Token: void reset()> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.Token: void reset()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.Token: void reset()> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: void reset()> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.Token: void reset()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.Token: void reset()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Token: void reset()> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.Token: void reset()> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Token: void reset()> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Token: void reset()> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.Token: void reset()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Token: void reset()> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.Token: void reset()> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Token: void reset()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.Token: void reset()> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.Token: void reset()> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Token: void reset()> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.Token: void reset()> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: void reset()> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.Token: void reset()> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Token: void reset()> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Token: void reset()> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Token: void reset()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Token: void reset()> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.Token: void reset()> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.Token: void reset()> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Token: void reset()> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.Token: void reset()> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.Token: void reset()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: void reset()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.Token: void reset()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: void reset()> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.Token: void reset()> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.Token: void reset()> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.Token: void reset()> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.Token: void reset()> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Token: void reset()> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.Token: void reset()> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.Token: void reset()> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.Token: void reset()> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Token: void reset()> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.Token: void reset()> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.Token: void reset()> , r38 = $r18 , return r38
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r38 = $r18 , return r38
<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> , $r0 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] $VALUES> , $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> , $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() , $r2 = (org.apache.commons.csv.Token$Type[]) $r1
<org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> , $r2 = (org.apache.commons.csv.Token$Type[]) $r1 , return $r2
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>() , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r3 = new java.util.NoSuchElementException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r3 = new java.util.NoSuchElementException , specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("CSVParser has been closed")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("CSVParser has been closed") , throw $r3
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = null
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = null , if r4 != null goto return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>() , if r4 != null goto return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , $r2 = new java.util.NoSuchElementException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r2 = new java.util.NoSuchElementException , specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more CSV records available")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more CSV records available") , throw $r2
<org.apache.commons.csv.Token: java.lang.String toString()> , r1 := @this: org.apache.commons.csv.Token , $r0 = new java.lang.StringBuilder
<org.apache.commons.csv.Token: java.lang.String toString()> , $r0 = new java.lang.StringBuilder , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Token: java.lang.String toString()> , specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() , $r2 = r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Token: java.lang.String toString()> , $r2 = r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r3 = virtualinvoke $r2.<org.apache.commons.csv.Token$Type: java.lang.String name()>()
<org.apache.commons.csv.Token: java.lang.String toString()> , $r3 = virtualinvoke $r2.<org.apache.commons.csv.Token$Type: java.lang.String name()>() , $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
<org.apache.commons.csv.Token: java.lang.String toString()> , $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) , $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [")
<org.apache.commons.csv.Token: java.lang.String toString()> , $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Token: java.lang.String toString()> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: java.lang.String toString()> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() , $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
<org.apache.commons.csv.Token: java.lang.String toString()> , $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
<org.apache.commons.csv.Token: java.lang.String toString()> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Token: java.lang.String toString()> , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() , return $r10
<org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> , r1 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r0 = new java.lang.UnsupportedOperationException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> , $r0 = new java.lang.UnsupportedOperationException , specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> , specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>() , throw $r0
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , specialinvoke r0.<java.io.BufferedReader: void mark(int)>(1)
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , specialinvoke r0.<java.io.BufferedReader: void mark(int)>(1) , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>() , specialinvoke r0.<java.io.BufferedReader: void reset()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , specialinvoke r0.<java.io.BufferedReader: void reset()>() , return i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>() , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , if i0 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != 10 goto (branch) , $i4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != 10 goto (branch) , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = $l5 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l6
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l6 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $l7 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l7 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , $l8 = $l7 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l8 = $l7 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l8
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l8 , $i9 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i9 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , return $i9
<org.apache.commons.csv.Lexer: boolean isClosed()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
<org.apache.commons.csv.Lexer: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>() , return $z0
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>() , return $z0
<org.apache.commons.csv.Token: void reset()> , r0 := @this: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Token: void reset()> , $r1 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0)
<org.apache.commons.csv.Token: void reset()> , virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) , $r2 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Token: void reset()> , $r2 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r2
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r2 , r0.<org.apache.commons.csv.Token: boolean isReady> = 0
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: boolean isReady> = 0 , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 0
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 0 , return
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: void close()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: void close()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , if $r1 == null goto return
<org.apache.commons.csv.CSVParser: void close()> , if $r1 == null goto return , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: void close()> , if $r1 == null goto return , return
<org.apache.commons.csv.CSVParser: void close()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>()
<org.apache.commons.csv.CSVParser: void close()> , virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>() , return
<org.apache.commons.csv.Lexer: void close()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.Lexer: void close()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: void close()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , if $r1 == null goto return
<org.apache.commons.csv.Lexer: void close()> , if $r1 == null goto return , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.Lexer: void close()> , if $r1 == null goto return , return
<org.apache.commons.csv.Lexer: void close()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>()
<org.apache.commons.csv.Lexer: void close()> , virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>() , return
<org.apache.commons.csv.Lexer: void close()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void close()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>()
<org.apache.commons.csv.Lexer: void close()> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>()
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>() , return
<org.apache.commons.csv.CSVPrinter: void close()> , r0 := @this: org.apache.commons.csv.CSVPrinter , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0)
<org.apache.commons.csv.CSVPrinter: void close()> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0) , return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , r0 := @this: org.apache.commons.csv.CSVPrinter
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , r0 := @this: org.apache.commons.csv.CSVPrinter , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0)
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0) , return
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> = 1
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> = 1 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1 , specialinvoke r0.<java.io.BufferedReader: void close()>()
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , specialinvoke r0.<java.io.BufferedReader: void close()>() , return
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>() , return $l0
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>() , return $l0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer , i1 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 := @parameter0: int , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r3 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r3 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i0 = virtualinvoke $r3.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $i0 = virtualinvoke $r3.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 = virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r5 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r5 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = "\r\n"
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = "\r\n" , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , if $r6 != null goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r6 != null goto (branch) , if i1 != 10 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r6 != null goto (branch) , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 10 goto (branch) , $r2 = <org.apache.commons.csv.Lexer: java.lang.String LF_STRING>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 10 goto (branch) , if i1 != 13 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r2 = <org.apache.commons.csv.Lexer: java.lang.String LF_STRING> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r2
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r2 , goto [?= (branch)]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= (branch)] , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto (branch) , $r1 = <org.apache.commons.csv.Lexer: java.lang.String CR_STRING>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto (branch) , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r1 = <org.apache.commons.csv.Lexer: java.lang.String CR_STRING> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r1 , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 == 10 goto $z0 = 1 , if i1 != 13 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 == 10 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r1 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , r1 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: int readEscape()> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: int readEscape()> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: int readEscape()> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: int readEscape()> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: int readEscape()> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: int readEscape()> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: int readEscape()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: int readEscape()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: int readEscape()> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: int readEscape()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: int readEscape()> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: int readEscape()> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: int readEscape()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: int readEscape()> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: int readEscape()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: int readEscape()> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: int readEscape()> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: int readEscape()> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: int readEscape()> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: int readEscape()> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: int readEscape()> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: int readEscape()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: int readEscape()> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: int readEscape()> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: int readEscape()> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: int readEscape()> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: int readEscape()> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: int readEscape()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: int readEscape()> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: int readEscape()> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: int readEscape()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: int readEscape()> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: int readEscape()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: int readEscape()> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: int readEscape()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: int readEscape()> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: int readEscape()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: int readEscape()> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: int readEscape()> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: int readEscape()> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: int readEscape()> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: int readEscape()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: int readEscape()> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: int readEscape()> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: int readEscape()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: int readEscape()> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: int readEscape()> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: int readEscape()> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: int readEscape()> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: int readEscape()> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: int readEscape()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: int readEscape()> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: int readEscape()> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: int readEscape()> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: int readEscape()> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: int readEscape()> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: int readEscape()> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: int readEscape()> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: int readEscape()> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: int readEscape()> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: int readEscape()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r1 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r1 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r0 := @this: org.apache.commons.csv.Lexer , r1 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1 := @parameter0: org.apache.commons.csv.Token , i6 := @parameter1: int
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i6 := @parameter1: int , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6) , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15 , r1.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c3 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c3 = (char) i6 , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3) , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c5 = (char) $i4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c5 = (char) $i4 , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= (branch)] , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c2 = (char) i1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c2 = (char) i1 , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c0 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c0 = (char) i6 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0) , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)] , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z5 == 0 goto return r1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto return r1 , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto return r1 , return r1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14) , return r1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r0 := @this: org.apache.commons.csv.Lexer , r1 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1 := @parameter0: org.apache.commons.csv.Token , i6 := @parameter1: int
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i6 := @parameter1: int , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6) , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15 , r1.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c3 = (char) i6
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c3 = (char) i6 , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3) , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c5 = (char) $i4
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c5 = (char) $i4 , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= (branch)] , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c2 = (char) i1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c2 = (char) i1 , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c0 = (char) i6
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c0 = (char) i6 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0) , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)] , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z5 == 0 goto return r1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z5 == 0 goto return r1 , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z5 == 0 goto return r1 , return r1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14) , return r1
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r0 := @this: org.apache.commons.csv.CSVParser , z1 := @parameter0: boolean
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , z1 := @parameter0: boolean , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>() , if $z0 == 0 goto $r7 = r3
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 == 0 goto $r7 = r3 , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 == 0 goto $r7 = r3 , $r7 = r3
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() , goto [?= r5 = $r7]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= r5 = $r7] , r5 = $r7
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r7 = r3 , r5 = $r7
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r5 = $r7 , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>() , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , return
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5) , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9) , return
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r0 := @this: org.apache.commons.csv.CSVParser , z1 := @parameter0: boolean
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , z1 := @parameter0: boolean , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>() , if $z0 == 0 goto $r7 = r3
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z0 == 0 goto $r7 = r3 , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z0 == 0 goto $r7 = r3 , $r7 = r3
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() , goto [?= r5 = $r7]
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , goto [?= r5 = $r7] , r5 = $r7
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r7 = r3 , r5 = $r7
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r5 = $r7 , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>() , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , return
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5) , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9) , return
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , r0 := @this: org.apache.commons.csv.CSVParser , z1 := @parameter0: boolean
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , z1 := @parameter0: boolean , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>() , if $z0 == 0 goto $r7 = r3
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z0 == 0 goto $r7 = r3 , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z0 == 0 goto $r7 = r3 , $r7 = r3
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() , goto [?= r5 = $r7]
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , goto [?= r5 = $r7] , r5 = $r7
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r7 = r3 , r5 = $r7
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , r5 = $r7 , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>() , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , return
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5) , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9) , return
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , r0 := @this: org.apache.commons.csv.CSVParser , z1 := @parameter0: boolean
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , z1 := @parameter0: boolean , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>() , if $z0 == 0 goto $r7 = r3
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z0 == 0 goto $r7 = r3 , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z0 == 0 goto $r7 = r3 , $r7 = r3
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() , goto [?= r5 = $r7]
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , goto [?= r5 = $r7] , r5 = $r7
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r7 = r3 , r5 = $r7
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , r5 = $r7 , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>() , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , return
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5) , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9) , return
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , return $l0
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , r0 := @this: org.apache.commons.csv.CSVPrinter , z0 := @parameter0: boolean
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , z0 := @parameter0: boolean , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>() , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z2 = $r4 instanceof java.io.Closeable
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $z2 = $r4 instanceof java.io.Closeable , if $z2 == 0 goto return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z2 == 0 goto return , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z2 == 0 goto return , return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r2 = (java.io.Closeable) $r1
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r2 = (java.io.Closeable) $r1 , interfaceinvoke $r2.<java.io.Closeable: void close()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , interfaceinvoke $r2.<java.io.Closeable: void close()>() , return
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , r0 := @this: org.apache.commons.csv.CSVPrinter
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , r0 := @this: org.apache.commons.csv.CSVPrinter , z0 := @parameter0: boolean
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , z0 := @parameter0: boolean , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>() , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z2 = $r4 instanceof java.io.Closeable
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $z2 = $r4 instanceof java.io.Closeable , if $z2 == 0 goto return
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if $z2 == 0 goto return , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , if $z2 == 0 goto return , return
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r2 = (java.io.Closeable) $r1
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $r2 = (java.io.Closeable) $r1 , interfaceinvoke $r2.<java.io.Closeable: void close()>()
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , interfaceinvoke $r2.<java.io.Closeable: void close()>() , return
<org.apache.commons.csv.CSVPrinter: void flush()> , r0 := @this: org.apache.commons.csv.CSVPrinter
<org.apache.commons.csv.CSVPrinter: void flush()> , r0 := @this: org.apache.commons.csv.CSVPrinter , z0 := @parameter0: boolean
<org.apache.commons.csv.CSVPrinter: void flush()> , z0 := @parameter0: boolean , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVPrinter: void flush()> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>() , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z2 = $r4 instanceof java.io.Closeable
<org.apache.commons.csv.CSVPrinter: void flush()> , $z2 = $r4 instanceof java.io.Closeable , if $z2 == 0 goto return
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z2 == 0 goto return , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z2 == 0 goto return , return
<org.apache.commons.csv.CSVPrinter: void flush()> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r2 = (java.io.Closeable) $r1
<org.apache.commons.csv.CSVPrinter: void flush()> , $r2 = (java.io.Closeable) $r1 , interfaceinvoke $r2.<java.io.Closeable: void close()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , interfaceinvoke $r2.<java.io.Closeable: void close()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , r1 := @parameter0: char[]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r1 := @parameter0: char[] , i1 := @parameter1: int
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , i1 := @parameter1: int , i0 := @parameter2: int
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , i0 := @parameter2: int , if i0 != 0 goto i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0)
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i0 != 0 goto i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0) , return 0
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i0 != 0 goto i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0) , i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0)
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0) , if i2 <= 0 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i2 <= 0 goto (branch) , i14 = i1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i2 <= 0 goto (branch) , if i2 != -1 goto $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , i14 = i1 , $i3 = i1 + i2
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i3 = i1 + i2 , if i14 >= $i3 goto $i4 = i1 + i2
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i14 >= $i3 goto $i4 = i1 + i2 , c7 = r1[i14]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i14 >= $i3 goto $i4 = i1 + i2 , $i4 = i1 + i2
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , c7 = r1[i14] , if c7 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if c7 != 10 goto (branch) , if i14 <= i1 goto $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if c7 != 10 goto (branch) , if c7 != 13 goto i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i14 <= i1 goto $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , $i12 = i14 - 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i14 <= i1 goto $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i12 = i14 - 1 , $i15 = r1[$i12]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i15 = r1[$i12] , goto [?= (branch)]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , goto [?= (branch)] , if 13 == $i15 goto i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if 13 == $i15 goto i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if 13 == $i15 goto i14 = i14 + 1 , $l10 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if 13 == $i15 goto i14 = i14 + 1 , i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l10 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l11 = $l10 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l11 = $l10 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l11
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l11 , goto [?= i14 = i14 + 1]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , goto [?= i14 = i14 + 1] , i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if c7 != 13 goto i14 = i14 + 1 , $l8 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if c7 != 13 goto i14 = i14 + 1 , i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l8 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l9 = $l8 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l9 = $l8 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l9
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l9 , i14 = i14 + 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , i14 = i14 + 1 , goto [?= $i3 = i1 + i2]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , goto [?= $i3 = i1 + i2] , $i3 = i1 + i2
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i4 = i1 + i2 , $i5 = $i4 - 1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $i5 = $i4 - 1 , $c6 = r1[$i5]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $c6 = r1[$i5] , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = $c6
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = $c6 , goto [?= $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>]
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , goto [?= $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>] , $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i2 != -1 goto $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , if i2 != -1 goto $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1 , $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , $l17 = (long) i2
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l17 = (long) i2 , $l18 = $l16 + $l17
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , $l18 = $l16 + $l17 , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l18
<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l18 , return i2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i0 := @parameter0: int , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c1 = $r1[0]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c1 = $r1[0] , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , return 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i2 = lengthof $r2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i2 = lengthof $r2 , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , return 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3) , i8 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i8 = 0 , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i3 = lengthof $r6
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i3 = lengthof $r6 , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $c7 = $r10[i8]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c7 = $r10[i8] , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i5 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i5 = i8 + 1 , $c6 = $r11[$i5]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c6 = $r11[$i5] , if $c7 == $c6 goto i8 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $c7 == $c6 goto i8 = i8 + 1 , return 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $c7 == $c6 goto i8 = i8 + 1 , i8 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i8 = i8 + 1 , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>] , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i4 = lengthof $r7
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i4 = lengthof $r7 , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4) , if i9 == -1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i9 == -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i9 == -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i0 := @parameter0: int , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c1 = $r1[0]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $c1 = $r1[0] , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , return 0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i2 = lengthof $r2
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $i2 = lengthof $r2 , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , return 1
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3) , i8 = 0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i8 = 0 , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i3 = lengthof $r6
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $i3 = lengthof $r6 , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $c7 = $r10[i8]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $c7 = $r10[i8] , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i5 = i8 + 1
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $i5 = i8 + 1 , $c6 = $r11[$i5]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $c6 = $r11[$i5] , if $c7 == $c6 goto i8 = i8 + 1
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if $c7 == $c6 goto i8 = i8 + 1 , return 0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if $c7 == $c6 goto i8 = i8 + 1 , i8 = i8 + 1
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i8 = i8 + 1 , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>] , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i4 = lengthof $r7
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $i4 = lengthof $r7 , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4) , if i9 == -1 goto $z0 = 0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i9 == -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , if i9 == -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: java.lang.StringBuilder
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r0 := @parameter0: java.lang.StringBuilder , i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i1 = i3 - 1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $i1 = i3 - 1 , $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1) , $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2) , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , i3 = i3 - 1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i3 = i3 - 1 , goto [?= (branch)]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= (branch)] , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , if i3 == $i0 goto return
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 == $i0 goto return , virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i3)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 == $i0 goto return , return
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i3) , return
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r0 := @this: org.apache.commons.csv.CSVParser , r4 := @parameter0: java.lang.String
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r4 := @parameter0: java.lang.String , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>() , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>() , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3) , if $z2 == 0 goto (branch)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r5 = null , if z0 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 == 0 goto $r5 = null , $r5 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r5 = r4 , goto [?= return $r5]
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , goto [?= return $r5] , return $r5
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r5 = null , return $r5
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r6 = r4 , if r3 != null goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if r3 != null goto $r6 = r4 , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if r3 != null goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r6 = r4 , if z0 != 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 != 0 goto $r6 = r4 , $r6 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 != 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r6 = null , goto [?= return $r6]
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , goto [?= return $r6] , return $r6
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r6 = r4 , return $r6
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , r0 := @this: org.apache.commons.csv.CSVParser , r4 := @parameter0: java.lang.String
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , r4 := @parameter0: java.lang.String , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>() , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>() , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3) , if $z2 == 0 goto (branch)
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r5 = null
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z1 == 0 goto $r5 = null , if z0 == 0 goto $r5 = null
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z1 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z0 == 0 goto $r5 = null , $r5 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z0 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r5 = r4 , goto [?= return $r5]
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , goto [?= return $r5] , return $r5
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r5 = null , return $r5
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z1 == 0 goto $r6 = r4 , if r3 != null goto $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z1 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if r3 != null goto $r6 = r4 , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if r3 != null goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if $z3 == 0 goto $r6 = r4 , if z0 != 0 goto $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if $z3 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z0 != 0 goto $r6 = r4 , $r6 = null
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , if z0 != 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r6 = null , goto [?= return $r6]
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , goto [?= return $r6] , return $r6
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r6 = r4 , return $r6
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser , r4 := @parameter0: java.lang.String
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r4 := @parameter0: java.lang.String , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>() , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>() , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3) , if $z2 == 0 goto (branch)
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z1 == 0 goto $r5 = null , if z0 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z1 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z0 == 0 goto $r5 = null , $r5 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z0 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r5 = r4 , goto [?= return $r5]
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , goto [?= return $r5] , return $r5
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r5 = null , return $r5
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z1 == 0 goto $r6 = r4 , if r3 != null goto $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z1 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if r3 != null goto $r6 = r4 , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if r3 != null goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $z3 == 0 goto $r6 = r4 , if z0 != 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $z3 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z0 != 0 goto $r6 = r4 , $r6 = null
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if z0 != 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r6 = null , goto [?= return $r6]
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , goto [?= return $r6] , return $r6
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r6 = r4 , return $r6
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL> , if $r2 == $r3 goto $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC> , if $r5 != $r6 goto $z0 = 0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z0 = 0 , return $z0
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL> , if $r2 == $r3 goto $z0 = 1
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC> , if $r5 != $r6 goto $z0 = 0
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>() , return $l0
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>() , return $l0
<com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> , $r0 = <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] $VALUES> , $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
<com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> , $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() , $r2 = (com.sun.nio.file.ExtendedOpenOption[]) $r1
<com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> , $r2 = (com.sun.nio.file.ExtendedOpenOption[]) $r1 , return $r2
<org.apache.commons.csv.CSVPrinter: void flush()> , r0 := @this: org.apache.commons.csv.CSVPrinter , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z0 = $r1 instanceof java.io.Flushable
<org.apache.commons.csv.CSVPrinter: void flush()> , $z0 = $r1 instanceof java.io.Flushable , if $z0 == 0 goto return
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z0 == 0 goto return , $r2 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z0 == 0 goto return , return
<org.apache.commons.csv.CSVPrinter: void flush()> , $r2 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r3 = (java.io.Flushable) $r2
<org.apache.commons.csv.CSVPrinter: void flush()> , $r3 = (java.io.Flushable) $r2 , interfaceinvoke $r3.<java.io.Flushable: void flush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , interfaceinvoke $r3.<java.io.Flushable: void flush()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r1 := @this: org.apache.commons.csv.ExtendedBufferedReader , r0 := @parameter0: char[]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r0 := @parameter0: char[] , i0 = lengthof r0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i0 = lengthof r0 , specialinvoke r1.<java.io.BufferedReader: void mark(int)>(i0)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: void mark(int)>(i0) , specialinvoke r1.<java.io.BufferedReader: int read(char[],int,int)>(r0, 0, i0)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: int read(char[],int,int)>(r0, 0, i0) , specialinvoke r1.<java.io.BufferedReader: void reset()>()
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: void reset()>() , return r0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0 := @this: org.apache.commons.csv.Lexer , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r1)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r1) , $r4 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r4 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $c1 = $r4[0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c1 = $r4[0] , $r5 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r5 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c0 = $r5[0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c0 = $r5[0] , if $c1 == $c0 goto i11 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c1 == $c0 goto i11 = 1 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c1 == $c0 goto i11 = 1 , i11 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i11 = 1 , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i2 = lengthof $r6
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i2 = lengthof $r6 , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i4 = 2 * i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i4 = 2 * i11 , $c6 = $r10[$i4]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c6 = $r10[$i4] , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c5 = $r11[i11]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c5 = $r11[i11] , if $c6 != $c5 goto return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c6 != $c5 goto return 0 , $r12 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c6 != $c5 goto return 0 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r12 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i7 = 2 * i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i7 = 2 * i11 , $i8 = $i7 - 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i8 = $i7 - 1 , $c10 = $r12[$i8]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c10 = $r12[$i8] , $c9 = r0.<org.apache.commons.csv.Lexer: char escape>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c9 = r0.<org.apache.commons.csv.Lexer: char escape> , if $c10 == $c9 goto i11 = i11 + 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c10 == $c9 goto i11 = i11 + 1 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c10 == $c9 goto i11 = i11 + 1 , i11 = i11 + 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i11 = i11 + 1 , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>] , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i3 = lengthof $r7
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i3 = lengthof $r7 , i12 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i3)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i12 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i3) , if i12 == -1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i12 == -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i12 == -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: int readEscape()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: int readEscape()> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $r2 = new java.io.IOException
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return i0
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 8
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 12
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 10
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 13
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 9
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
<org.apache.commons.csv.Lexer: int readEscape()> , $r2 = new java.io.IOException , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence") , throw $r2
<org.apache.commons.csv.Lexer: int readEscape()> , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0) , if $z0 == 0 goto return -1
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto return -1 , return i0
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto return -1 , return -1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , r0 := @this: org.apache.commons.csv.Lexer
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $r2 = new java.io.IOException
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return i0
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 8
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 12
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 10
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 13
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 9
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $r2 = new java.io.IOException , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence") , throw $r2
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0) , if $z0 == 0 goto return -1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if $z0 == 0 goto return -1 , return i0
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if $z0 == 0 goto return -1 , return -1
<org.apache.commons.csv.CSVParser: boolean isClosed()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
<org.apache.commons.csv.CSVParser: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>() , return $z0
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>() , return $r2
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r3 := @caughtexception , r4 = $r3
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , r4 = $r3 , $r5 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r5 = new java.lang.IllegalStateException , $r6 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r6 = new java.lang.StringBuilder , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>() , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ") , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>() , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4)
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> , specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4) , throw $r5
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>() , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , $r3 = new java.util.NoSuchElementException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r3 = new java.util.NoSuchElementException , specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("CSVParser has been closed")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("CSVParser has been closed") , throw $r3
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = null
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = null , if r4 != null goto return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>() , if r4 != null goto return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , $r2 = new java.util.NoSuchElementException
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , if r4 != null goto return r4 , return r4
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , $r2 = new java.util.NoSuchElementException , specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more CSV records available")
<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> , specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more CSV records available") , throw $r2
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase> , return $z0
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces> , return $z0
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines> , return $z0
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , if $r1 == null goto $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r1 == null goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , if $r1 == null goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> , $z0 = 0 , return $z0
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker> , if $r1 == null goto $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r1 == null goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , if $r1 == null goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> , $z0 = 0 , return $z0
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter> , if $r1 == null goto $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r1 == null goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , if $r1 == null goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> , $z0 = 0 , return $z0
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter> , if $r1 == null goto $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r1 == null goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , if $r1 == null goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> , $z0 = 0 , return $z0
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , specialinvoke r0.<java.io.BufferedReader: void mark(int)>(1)
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , specialinvoke r0.<java.io.BufferedReader: void mark(int)>(1) , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>() , specialinvoke r0.<java.io.BufferedReader: void reset()>()
<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> , specialinvoke r0.<java.io.BufferedReader: void reset()>() , return i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , i0 = specialinvoke r0.<java.io.BufferedReader: int read()>() , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , if i0 != 10 goto (branch)
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != 10 goto (branch) , $i4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != 10 goto (branch) , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = $l5 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l6
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l6 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0 , $l7 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l7 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , $l8 = $l7 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $l8 = $l7 + 1L , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l8
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l8 , $i9 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int read()> , $i9 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , return $i9
<org.apache.commons.csv.Lexer: boolean isClosed()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isClosed()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
<org.apache.commons.csv.Lexer: boolean isClosed()> , $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>() , return $z0
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0 := @this: org.apache.commons.csv.CSVParser , r38 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r38 = null , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , interfaceinvoke $r1.<java.util.List: void clear()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , interfaceinvoke $r1.<java.util.List: void clear()>() , r39 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r39 = null , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>() , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset> , l2 = $l0 + $l1
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , l2 = $l0 + $l1 , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>() , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4) , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>() , $i4 = $r9[$i3]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $i4 = $r9[$i3] , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r24 = new java.io.IOException
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; } , $r31 = new java.lang.IllegalStateException
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1) , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r24 = new java.io.IOException , $r25 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r25 = new java.lang.StringBuilder , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>() , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8) , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence") , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29) , throw $r24
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r23 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r23 = new java.lang.StringBuilder , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() , r39 = $r23
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r39 = $r23 , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12) , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14 , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>] , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r31 = new java.lang.IllegalStateException , $r32 = new java.lang.StringBuilder
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r32 = new java.lang.StringBuilder , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ") , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37) , throw $r31
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() , if $z0 != 0 goto return r38
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z0 != 0 goto return r38 , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if $z0 != 0 goto return r38 , return r38
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , $l6 = $l5 + 1L
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l6 = $l5 + 1L , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6 , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = null
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r43 = null , goto [?= r17 = $r43]
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , goto [?= r17 = $r43] , r17 = $r43
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>() , r17 = $r43
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r17 = $r43 , $r18 = new org.apache.commons.csv.CSVRecord
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r18 = new org.apache.commons.csv.CSVRecord , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19) , $r22 = (java.lang.String[]) $r21
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $r22 = (java.lang.String[]) $r21 , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2) , r38 = $r18
<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> , r38 = $r18 , return r38
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , return $l0
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r0 := @this: org.apache.commons.csv.CSVParser , z1 := @parameter0: boolean
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , z1 := @parameter0: boolean , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>() , if $z0 == 0 goto $r7 = r3
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 == 0 goto $r7 = r3 , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z0 == 0 goto $r7 = r3 , $r7 = r3
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() , goto [?= r5 = $r7]
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , goto [?= r5 = $r7] , r5 = $r7
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r7 = r3 , r5 = $r7
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , r5 = $r7 , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>() , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , return
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5) , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> , interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9) , return
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r0 := @this: org.apache.commons.csv.Lexer , r3 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3 := @parameter0: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , i1 = i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i1 = i2 , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z11 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z11 == 0 goto (branch) , if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1) , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1) , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1) , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2) , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>() , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , if $r20 != $r21 goto return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $r20 != $r21 goto return r3 , return r3
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $c0 = (char) i2 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2) , goto [?= $c0 = (char) i2]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $c0 = (char) i2] , $c0 = (char) i2
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2) , if $z14 == 0 goto (branch)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z14 == 0 goto (branch) , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2) , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2) , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6 , r3.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , r3.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2) , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> , goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>] , $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
<org.apache.commons.csv.Token: void reset()> , r0 := @this: org.apache.commons.csv.Token , $r1 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Token: void reset()> , $r1 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0)
<org.apache.commons.csv.Token: void reset()> , virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) , $r2 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
<org.apache.commons.csv.Token: void reset()> , $r2 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r2
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r2 , r0.<org.apache.commons.csv.Token: boolean isReady> = 0
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: boolean isReady> = 0 , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 0
<org.apache.commons.csv.Token: void reset()> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 0 , return
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
<org.apache.commons.csv.Lexer: long getCharacterPosition()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>() , return $l0
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $z0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed>
<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> , $z0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> , return $z0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r0 := @this: org.apache.commons.csv.Lexer , r1 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1 := @parameter0: org.apache.commons.csv.Token , i6 := @parameter1: int
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i6 := @parameter1: int , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6) , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6) , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15 , r1.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: boolean isReady> = 1 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6) , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13 , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>] , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6) , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>() , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c3 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c3 = (char) i6 , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3) , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c5 = (char) $i4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c5 = (char) $i4 , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= (branch)] , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c2 = (char) i1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c2 = (char) i1 , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c0 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $c0 = (char) i6 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0) , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)] , $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces> , if $z5 == 0 goto return r1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto return r1 , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , if $z5 == 0 goto return r1 , return r1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> , virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14) , return r1
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , i0 := @parameter0: int , if i0 != -1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if i0 != -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , if i0 != -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: org.apache.commons.csv.Token
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0 := @parameter0: org.apache.commons.csv.Token , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1 , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11) , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>() , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>() , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c8 = (char) i11
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c8 = (char) i11 , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>() , $c10 = (char) $i9
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c10 = (char) $i9 , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10) , goto [?= (branch)]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= (branch)] , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c7 = (char) i6
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c7 = (char) i6 , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11) , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2) , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c5 = (char) i12
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c5 = (char) i12 , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13) , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13) , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19 , r0.<org.apache.commons.csv.Token: boolean isReady> = 1
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: boolean isReady> = 1 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13) , if $z5 == 0 goto $c3 = (char) i13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto $c3 = (char) i13 , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z5 == 0 goto $c3 = (char) i13 , $c3 = (char) i13
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18 , return r0
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c3 = (char) i13 , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r12 = new java.io.IOException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r12 = new java.io.IOException , $r13 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r13 = new java.lang.StringBuilder , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ") , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>() , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4) , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter") , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17) , throw $r12
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11) , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r4 = new java.io.IOException
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r4 = new java.io.IOException , $r5 = new java.lang.StringBuilder
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r5 = new java.lang.StringBuilder , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ") , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished") , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) , throw $r4
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content> , $c1 = (char) i11
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , $c1 = (char) i11 , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> , goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>] , $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , i0 := @parameter0: int , $c1 = r0.<org.apache.commons.csv.Lexer: char quoteChar>
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $c1 = r0.<org.apache.commons.csv.Lexer: char quoteChar> , if i0 != $c1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i0 := @parameter0: int , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c1 = $r1[0]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c1 = $r1[0] , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , return 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i2 = lengthof $r2
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i2 = lengthof $r2 , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , return 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3) , i8 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i8 = 0 , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i3 = lengthof $r6
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i3 = lengthof $r6 , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $c7 = $r10[i8]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c7 = $r10[i8] , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i5 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i5 = i8 + 1 , $c6 = $r11[$i5]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $c6 = $r11[$i5] , if $c7 == $c6 goto i8 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $c7 == $c6 goto i8 = i8 + 1 , return 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if $c7 == $c6 goto i8 = i8 + 1 , i8 = i8 + 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i8 = i8 + 1 , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>] , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf> , $i4 = lengthof $r7
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $i4 = lengthof $r7 , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4) , if i9 == -1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i9 == -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , if i9 == -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isDelimiter(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer , i1 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 := @parameter0: int , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r3 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r3 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $i0 = virtualinvoke $r3.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $i0 = virtualinvoke $r3.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>() , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i1 = virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , i1 = virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , $r5 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r5 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = "\r\n"
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = "\r\n" , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> , if $r6 != null goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r6 != null goto (branch) , if i1 != 10 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if $r6 != null goto (branch) , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 10 goto (branch) , $r2 = <org.apache.commons.csv.Lexer: java.lang.String LF_STRING>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 10 goto (branch) , if i1 != 13 goto (branch)
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r2 = <org.apache.commons.csv.Lexer: java.lang.String LF_STRING> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r2
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r2 , goto [?= (branch)]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= (branch)] , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto (branch) , $r1 = <org.apache.commons.csv.Lexer: java.lang.String CR_STRING>
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto (branch) , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $r1 = <org.apache.commons.csv.Lexer: java.lang.String CR_STRING> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r1 , if i1 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 == 10 goto $z0 = 1 , if i1 != 13 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 == 10 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , if i1 != 13 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , i0 := @parameter0: int , $c1 = r0.<org.apache.commons.csv.Lexer: char commentStart>
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $c1 = r0.<org.apache.commons.csv.Lexer: char commentStart> , if i0 != $c1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isCommentStart(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , i0 := @parameter0: int , if i0 == 10 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 == 10 goto $z0 = 1 , if i0 == 13 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 == 10 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 == 13 goto $z0 = 1 , if i0 != -2 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 == 13 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 != -2 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , if i0 != -2 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> , $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , return $i0
<org.apache.commons.csv.Lexer: void close()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: void close()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>()
<org.apache.commons.csv.Lexer: void close()> , virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> = 1
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> = 1 , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1 , specialinvoke r0.<java.io.BufferedReader: void close()>()
<org.apache.commons.csv.ExtendedBufferedReader: void close()> , specialinvoke r0.<java.io.BufferedReader: void close()>() , return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , r0 := @this: org.apache.commons.csv.CSVPrinter , z0 := @parameter0: boolean
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , z0 := @parameter0: boolean , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>() , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>() , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z2 = $r4 instanceof java.io.Closeable
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $z2 = $r4 instanceof java.io.Closeable , if $z2 == 0 goto return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z2 == 0 goto return , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , if $z2 == 0 goto return , return
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r2 = (java.io.Closeable) $r1
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , $r2 = (java.io.Closeable) $r1 , interfaceinvoke $r2.<java.io.Closeable: void close()>()
<org.apache.commons.csv.CSVPrinter: void close(boolean)> , interfaceinvoke $r2.<java.io.Closeable: void close()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $l0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> , $l0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> , return $l0
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
<org.apache.commons.csv.Lexer: long getCurrentLineNumber()> , $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>() , return $l0
<org.apache.commons.csv.Lexer: int readEscape()> , r0 := @this: org.apache.commons.csv.Lexer , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: int readEscape()> , $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
<org.apache.commons.csv.Lexer: int readEscape()> , i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>() , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $r2 = new java.io.IOException
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return i0
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 8
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 12
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 10
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 13
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , return 9
<org.apache.commons.csv.Lexer: int readEscape()> , lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); } , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
<org.apache.commons.csv.Lexer: int readEscape()> , $r2 = new java.io.IOException , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
<org.apache.commons.csv.Lexer: int readEscape()> , specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence") , throw $r2
<org.apache.commons.csv.Lexer: int readEscape()> , $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0) , if $z0 == 0 goto return -1
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto return -1 , return i0
<org.apache.commons.csv.Lexer: int readEscape()> , if $z0 == 0 goto return -1 , return -1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , r0 := @this: org.apache.commons.csv.Lexer , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r1 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r1)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r1) , $r4 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r4 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $c1 = $r4[0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c1 = $r4[0] , $r5 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r5 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c0 = $r5[0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c0 = $r5[0] , if $c1 == $c0 goto i11 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c1 == $c0 goto i11 = 1 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c1 == $c0 goto i11 = 1 , i11 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i11 = 1 , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $i2 = lengthof $r6
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i2 = lengthof $r6 , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r10 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i4 = 2 * i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i4 = 2 * i11 , $c6 = $r10[$i4]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c6 = $r10[$i4] , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter> , $c5 = $r11[i11]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c5 = $r11[i11] , if $c6 != $c5 goto return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c6 != $c5 goto return 0 , $r12 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c6 != $c5 goto return 0 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r12 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i7 = 2 * i11
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i7 = 2 * i11 , $i8 = $i7 - 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i8 = $i7 - 1 , $c10 = $r12[$i8]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c10 = $r12[$i8] , $c9 = r0.<org.apache.commons.csv.Lexer: char escape>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $c9 = r0.<org.apache.commons.csv.Lexer: char escape> , if $c10 == $c9 goto i11 = i11 + 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c10 == $c9 goto i11 = i11 + 1 , return 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if $c10 == $c9 goto i11 = i11 + 1 , i11 = i11 + 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i11 = i11 + 1 , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>] , $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r8 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $r7 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf> , $i3 = lengthof $r7
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $i3 = lengthof $r7 , i12 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i3)
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , i12 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i3) , if i12 == -1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i12 == -1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , if i12 == -1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , i0 := @parameter0: int , $c1 = r0.<org.apache.commons.csv.Lexer: char escape>
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $c1 = r0.<org.apache.commons.csv.Lexer: char escape> , if i0 != $c1 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , if i0 != $c1 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isEscape(int)> , $z0 = 0 , return $z0
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r1 := @this: org.apache.commons.csv.Lexer , r0 := @parameter0: java.lang.StringBuilder
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , r0 := @parameter0: java.lang.StringBuilder , i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i1 = i3 - 1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $i1 = i3 - 1 , $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1) , $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2) , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , i3 = i3 - 1
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , i3 = i3 - 1 , goto [?= (branch)]
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , goto [?= (branch)] , if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>() , if i3 == $i0 goto return
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 == $i0 goto return , virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i3)
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , if i3 == $i0 goto return , return
<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> , virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i3) , return
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r0 := @this: org.apache.commons.csv.CSVParser , r4 := @parameter0: java.lang.String
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r4 := @parameter0: java.lang.String , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>() , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>() , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3) , if $z2 == 0 goto (branch)
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z2 == 0 goto (branch) , if z1 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r5 = null , if z0 == 0 goto $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 == 0 goto $r5 = null , $r5 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 == 0 goto $r5 = null , $r5 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r5 = r4 , goto [?= return $r5]
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , goto [?= return $r5] , return $r5
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r5 = null , return $r5
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r6 = r4 , if r3 != null goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z1 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if r3 != null goto $r6 = r4 , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if r3 != null goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>() , if $z3 == 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r6 = r4 , if z0 != 0 goto $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if $z3 == 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 != 0 goto $r6 = r4 , $r6 = null
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , if z0 != 0 goto $r6 = r4 , $r6 = r4
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r6 = null , goto [?= return $r6]
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , goto [?= return $r6] , return $r6
<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> , $r6 = r4 , return $r6
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter> , return $z0
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
<org.apache.commons.csv.CSVFormat: boolean getTrim()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trim> , return $z0
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , r0 := @this: org.apache.commons.csv.CSVFormat , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> , $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush> , return $z0
<org.apache.commons.csv.CSVPrinter: void flush()> , r0 := @this: org.apache.commons.csv.CSVPrinter , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $z0 = $r1 instanceof java.io.Flushable
<org.apache.commons.csv.CSVPrinter: void flush()> , $z0 = $r1 instanceof java.io.Flushable , if $z0 == 0 goto return
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z0 == 0 goto return , $r2 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
<org.apache.commons.csv.CSVPrinter: void flush()> , if $z0 == 0 goto return , return
<org.apache.commons.csv.CSVPrinter: void flush()> , $r2 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable> , $r3 = (java.io.Flushable) $r2
<org.apache.commons.csv.CSVPrinter: void flush()> , $r3 = (java.io.Flushable) $r2 , interfaceinvoke $r3.<java.io.Flushable: void flush()>()
<org.apache.commons.csv.CSVPrinter: void flush()> , interfaceinvoke $r3.<java.io.Flushable: void flush()>() , return
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r1 := @this: org.apache.commons.csv.ExtendedBufferedReader , r0 := @parameter0: char[]
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , r0 := @parameter0: char[] , i0 = lengthof r0
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , i0 = lengthof r0 , specialinvoke r1.<java.io.BufferedReader: void mark(int)>(i0)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: void mark(int)>(i0) , specialinvoke r1.<java.io.BufferedReader: int read(char[],int,int)>(r0, 0, i0)
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: int read(char[],int,int)>(r0, 0, i0) , specialinvoke r1.<java.io.BufferedReader: void reset()>()
<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> , specialinvoke r1.<java.io.BufferedReader: void reset()>() , return r0
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString> , return $r1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVParser , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL> , if $r2 == $r3 goto $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r2 == $r3 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>() , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC> , if $r5 != $r6 goto $z0 = 0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , if $r5 != $r6 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> , $z0 = 0 , return $z0
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , r0 := @this: org.apache.commons.csv.CSVFormat , $r1 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> , $r1 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode> , return $r1
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , r0 := @this: org.apache.commons.csv.ExtendedBufferedReader , $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i0 == 13 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i0 == 13 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i0 == 13 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i1 == 10 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i1 == 10 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i1 == 10 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i2 == -2 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i2 == -2 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i2 == -2 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> , if $i3 != -1 goto $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i3 != -1 goto $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , if $i3 != -1 goto $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , return $l6
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> , $l5 = $l4 + 1L
<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> , $l5 = $l4 + 1L , return $l5
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , r0 := @this: org.apache.commons.csv.Lexer , i0 := @parameter0: int
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , i0 := @parameter0: int , $c1 = r0.<org.apache.commons.csv.Lexer: char escape>
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $c1 = r0.<org.apache.commons.csv.Lexer: char escape> , if i0 == $c1 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 == $c1 goto $z0 = 1 , $c2 = r0.<org.apache.commons.csv.Lexer: char quoteChar>
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 == $c1 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $c2 = r0.<org.apache.commons.csv.Lexer: char quoteChar> , if i0 == $c2 goto $z0 = 1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 == $c2 goto $z0 = 1 , $c3 = r0.<org.apache.commons.csv.Lexer: char commentStart>
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 == $c2 goto $z0 = 1 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $c3 = r0.<org.apache.commons.csv.Lexer: char commentStart> , if i0 != $c3 goto $z0 = 0
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 != $c3 goto $z0 = 0 , $z0 = 1
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , if i0 != $c3 goto $z0 = 0 , $z0 = 0
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $z0 = 1 , goto [?= return $z0]
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , goto [?= return $z0] , return $z0
<org.apache.commons.csv.Lexer: boolean isMetaChar(int)> , $z0 = 0 , return $z0
