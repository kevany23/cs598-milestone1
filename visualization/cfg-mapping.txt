CFG statement, key number
0, <org.apache.commons.csv.CSVFormat: int hashCode()> | r0 := @this: org.apache.commons.csv.CSVFormat
1, <org.apache.commons.csv.CSVFormat: int hashCode()> | b0 = 31
3, <org.apache.commons.csv.CSVFormat: int hashCode()> | b8 = 1
5, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i1 = 31 * b8
7, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
9, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1)
11, <org.apache.commons.csv.CSVFormat: int hashCode()> | i9 = $i1 + $i2
13, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i3 = 31 * i9
15, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r2 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
17, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i4 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2)
19, <org.apache.commons.csv.CSVFormat: int hashCode()> | i10 = $i3 + $i4
21, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i5 = 31 * i10
23, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3 = newarray (java.lang.Object)[17]
25, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
27, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
29, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[0] = $r4
31, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
33, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
35, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[1] = $r5
37, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z2 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
39, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
41, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[2] = $r6
43, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r7 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
45, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[3] = $r7
47, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
49, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[4] = $r8
51, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r9 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
53, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[5] = $r9
55, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
57, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3)
59, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[6] = $r10
61, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z4 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
63, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4)
65, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[7] = $r11
67, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
69, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5)
71, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[8] = $r12
73, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r13 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
75, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[9] = $r13
77, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
79, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[10] = $r14
81, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r15 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
83, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[11] = $r15
85, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
87, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[12] = $r16
89, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r17 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
91, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[13] = $r17
93, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z6 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
95, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6)
97, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[14] = $r18
99, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z7 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
101, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7)
103, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[15] = $r19
105, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z8 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
107, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8)
109, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r3[16] = $r20
111, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i6 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r3)
113, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i7 = $i5 + $i6
115, <org.apache.commons.csv.CSVFormat: int hashCode()> | return $i7
116, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r0 := @this: org.apache.commons.csv.CSVFormat
117, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r1 := @parameter0: java.lang.Object
119, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if r0 != r1 goto (branch)
121, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return 1
123, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if r1 == null goto return 0
125, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
127, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return 0
129, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
131, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r2 == $r3 goto r4 = (org.apache.commons.csv.CSVFormat) r1
135, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r4 = (org.apache.commons.csv.CSVFormat) r1
137, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z1 = r0.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
139, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z0 = r4.<org.apache.commons.csv.CSVFormat: boolean allowDuplicateHeaderNames>
141, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z1 != $z0 goto $z27 = 0
143, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z3 = r0.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
145, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z27 = 0
147, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z2 = r4.<org.apache.commons.csv.CSVFormat: boolean allowMissingColumnNames>
149, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z3 != $z2 goto $z27 = 0
151, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z5 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
155, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z4 = r4.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
157, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z5 != $z4 goto $z27 = 0
159, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r6 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
163, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r5 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
165, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5)
167, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z6 == 0 goto $z27 = 0
169, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r8 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
173, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r7 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
175, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7)
177, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z7 == 0 goto $z27 = 0
179, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r10 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
183, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r9 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
185, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9)
187, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z8 == 0 goto $z27 = 0
189, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r12 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
193, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r11 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
195, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11)
197, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z9 == 0 goto $z27 = 0
199, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r14 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
203, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r13 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
205, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z10 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r14, $r13)
207, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z10 == 0 goto $z27 = 0
209, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z12 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
213, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z11 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
215, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z12 != $z11 goto $z27 = 0
217, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z14 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
221, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z13 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
223, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z14 != $z13 goto $z27 = 0
225, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z16 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
229, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z15 = r4.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
231, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z16 != $z15 goto $z27 = 0
233, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r16 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
237, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r15 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
239, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15)
241, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z17 == 0 goto $z27 = 0
243, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r18 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
247, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r17 = r4.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
249, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z18 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, $r17)
251, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z18 == 0 goto $z27 = 0
253, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r20 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
257, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r19 = r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
259, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r20 != $r19 goto $z27 = 0
261, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r22 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
265, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r21 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String quotedNullString>
267, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z19 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r22, $r21)
269, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z19 == 0 goto $z27 = 0
271, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r24 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
275, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r23 = r4.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
277, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z20 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r24, $r23)
279, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z20 == 0 goto $z27 = 0
281, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z22 = r0.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
285, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z21 = r4.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
287, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z22 != $z21 goto $z27 = 0
289, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z24 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
293, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z23 = r4.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
295, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z24 != $z23 goto $z27 = 0
297, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z26 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
301, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z25 = r4.<org.apache.commons.csv.CSVFormat: boolean trim>
303, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z26 != $z25 goto $z27 = 0
305, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z27 = 1
309, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | goto [?= return $z27]
311, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return $z27
314, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
315, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
317, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
319, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
321, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | return 0
323, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
325, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
327, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
329, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
331, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
335, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | if $r3 == null goto $z1 = 0
337, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $z1 = 1
339, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $z1 = 0
341, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | goto [?= return $z1]
343, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | return $z1
346, <org.apache.commons.csv.CSVParser: boolean isClosed()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
348, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
350, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
352, <org.apache.commons.csv.CSVParser: boolean isClosed()> | if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
354, <org.apache.commons.csv.CSVParser: boolean isClosed()> | return 0
356, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
358, <org.apache.commons.csv.CSVParser: boolean isClosed()> | if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
360, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
362, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
364, <org.apache.commons.csv.CSVParser: boolean isClosed()> | r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
368, <org.apache.commons.csv.CSVParser: boolean isClosed()> | if $r3 == null goto $z1 = 0
370, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $z1 = 1
372, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $z1 = 0
374, <org.apache.commons.csv.CSVParser: boolean isClosed()> | goto [?= return $z1]
376, <org.apache.commons.csv.CSVParser: boolean isClosed()> | return $z1
379, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
381, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
383, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
385, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
387, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | return 0
389, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
391, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
393, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
395, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
397, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
401, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $r3 == null goto $z1 = 0
403, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z1 = 1
405, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z1 = 0
407, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | goto [?= return $z1]
409, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | return $z1
412, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
413, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>()
415, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | return $r1
416, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
418, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>()
420, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | return $r1
421, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | r3 := @this: org.apache.commons.csv.CSVFormat
422, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
424, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
426, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | r1 = $r0
428, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
430, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
432, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
434, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
436, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
438, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
440, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
442, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
444, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
446, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
448, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
450, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
454, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
458, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
460, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
462, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
464, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
466, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
470, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
474, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
476, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
478, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
480, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
482, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
486, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
490, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
492, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
494, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
496, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
498, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
502, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
506, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
508, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
510, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
512, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
514, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
518, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
522, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
524, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
526, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
528, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
530, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
534, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
536, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
538, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
542, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
544, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
546, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
550, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
552, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
554, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
558, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
560, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
562, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
564, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
568, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
570, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
572, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
574, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
576, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
580, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
584, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
586, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
588, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
590, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
592, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
596, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | return $r13
597, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | r3 := @this: org.apache.commons.csv.CSVFormat
599, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r0 = new java.lang.StringBuilder
601, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
603, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | r1 = $r0
605, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
607, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
609, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
611, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
613, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
615, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
617, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
619, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
621, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
623, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
625, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
627, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
631, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
635, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
637, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
639, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
641, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
643, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
647, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
651, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
653, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
655, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
657, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
659, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
663, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
667, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
669, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
671, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
673, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
675, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
679, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
683, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
685, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
687, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
689, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
691, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
695, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
699, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
701, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
703, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
705, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
707, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
711, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
713, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
715, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
719, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
721, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
723, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
727, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
729, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
731, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
735, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
737, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
739, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
741, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
745, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
747, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
749, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
751, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
753, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
757, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
761, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
763, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
765, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
767, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
769, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
773, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | return $r13
774, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | r3 := @this: org.apache.commons.csv.CSVFormat
776, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r0 = new java.lang.StringBuilder
778, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
780, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | r1 = $r0
782, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
784, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
786, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
788, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
790, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
792, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
794, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
796, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
798, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
800, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
802, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
804, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
808, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
812, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
814, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
816, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
818, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
820, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
824, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
828, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
830, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
832, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
834, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
836, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
840, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
844, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
846, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
848, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
850, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
852, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
856, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
860, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
862, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
864, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
866, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
868, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
872, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
876, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
878, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
880, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
882, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
884, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
888, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
890, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
892, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
896, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
898, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
900, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
904, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
906, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
908, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
912, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
914, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
916, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
918, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
922, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
924, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
926, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
928, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
930, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
934, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
938, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
940, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
942, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
944, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
946, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
950, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | return $r13
951, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | r3 := @this: org.apache.commons.csv.CSVFormat
953, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r0 = new java.lang.StringBuilder
955, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
957, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | r1 = $r0
959, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
961, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
963, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
965, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
967, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
969, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
971, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
973, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
975, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
977, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
979, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
981, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
985, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
989, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
991, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
993, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
995, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
997, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1001, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1005, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1007, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
1009, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1011, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
1013, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1017, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1021, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1023, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
1025, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
1027, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
1029, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1033, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1037, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1039, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
1041, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
1043, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
1045, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1049, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1053, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1055, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
1057, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1059, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
1061, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1065, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1067, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
1069, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1073, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1075, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
1077, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1081, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1083, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
1085, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1089, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
1091, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
1093, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1095, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1099, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1101, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
1103, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1105, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
1107, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
1111, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1115, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1117, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
1119, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1121, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
1123, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
1127, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | return $r13
1128, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
1130, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r0 = new java.lang.StringBuilder
1132, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1134, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | r1 = $r0
1136, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
1138, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
1140, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
1142, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1144, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
1146, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1148, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
1150, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1152, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
1154, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
1156, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
1158, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1162, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1166, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1168, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
1170, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
1172, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
1174, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1178, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1182, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1184, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
1186, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1188, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
1190, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1194, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1198, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1200, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
1202, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
1204, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
1206, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1210, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1214, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1216, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
1218, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
1220, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
1222, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1226, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1230, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1232, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
1234, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1236, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
1238, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1242, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1244, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
1246, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1250, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1252, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
1254, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1258, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1260, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
1262, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1266, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
1268, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
1270, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1272, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1276, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1278, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
1280, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1282, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
1284, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
1288, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1292, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1294, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
1296, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1298, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
1300, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
1304, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | return $r13
1305, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
1307, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r0 = new java.lang.StringBuilder
1309, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1311, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | r1 = $r0
1313, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
1315, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
1317, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
1319, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1321, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
1323, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1325, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
1327, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1329, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
1331, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
1333, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
1335, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1339, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1343, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1345, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
1347, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
1349, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
1351, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1355, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1359, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1361, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
1363, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1365, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
1367, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1371, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1375, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1377, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
1379, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
1381, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
1383, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1387, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1391, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1393, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
1395, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
1397, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
1399, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1403, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1407, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1409, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
1411, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1413, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
1415, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1419, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1421, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
1423, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1427, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1429, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
1431, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1435, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1437, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
1439, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1443, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
1445, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
1447, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1449, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1453, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1455, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
1457, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1459, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
1461, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
1465, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1469, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1471, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
1473, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1475, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
1477, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
1481, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | return $r13
1482, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
1484, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r0 = new java.lang.StringBuilder
1486, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1488, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | r1 = $r0
1490, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
1492, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
1494, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
1496, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1498, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
1500, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1502, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
1504, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1506, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
1508, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
1510, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
1512, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1516, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1520, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1522, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
1524, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
1526, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
1528, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1532, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1536, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1538, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
1540, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1542, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
1544, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1548, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1552, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1554, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
1556, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
1558, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
1560, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1564, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1568, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1570, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
1572, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
1574, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
1576, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1580, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1584, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1586, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
1588, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1590, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
1592, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1596, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1598, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
1600, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1604, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1606, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
1608, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1612, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1614, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
1616, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1620, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
1622, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
1624, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1626, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1630, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1632, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
1634, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1636, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
1638, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
1642, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1646, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1648, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
1650, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1652, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
1654, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
1658, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | return $r13
1659, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
1661, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r0 = new java.lang.StringBuilder
1663, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1665, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | r1 = $r0
1667, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
1669, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
1671, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
1673, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1675, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
1677, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1679, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
1681, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
1683, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
1685, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
1687, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
1689, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1693, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1697, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1699, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
1701, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
1703, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
1705, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1709, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1713, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
1715, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
1717, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
1719, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
1721, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1725, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1729, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
1731, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
1733, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
1735, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
1737, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1741, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1745, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1747, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
1749, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
1751, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
1753, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1757, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1761, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
1763, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
1765, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
1767, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
1769, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
1773, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1775, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
1777, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
1781, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1783, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
1785, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
1789, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1791, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
1793, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
1797, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
1799, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
1801, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1803, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1807, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1809, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
1811, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
1813, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
1815, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
1819, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1823, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
1825, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
1827, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
1829, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
1831, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
1835, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | return $r13
1836, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | r2 := @this: org.apache.commons.csv.CSVRecord
1837, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
1839, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1841, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CSVRecord [comment=\'")
1843, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r3 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String comment>
1845, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
1847, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', recordNumber=")
1849, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $l0 = r2.<org.apache.commons.csv.CSVRecord: long recordNumber>
1851, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
1853, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", values=")
1855, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r8 = r2.<org.apache.commons.csv.CSVRecord: java.lang.String[] values>
1857, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r8)
1859, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
1861, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
1863, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
1865, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | return $r12
1866, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
1867, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1869, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if $i0 != -1 goto $r1 = new java.lang.StringBuilder
1871, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | return null
1873, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r1 = new java.lang.StringBuilder
1875, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
1877, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | r2 = $r1
1879, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1881, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if i1 != 13 goto (branch)
1883, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1885, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1887, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if i3 != 10 goto (branch)
1889, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1895, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1897, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1899, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if i1 != 13 goto $c2 = (char) i1
1903, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
1905, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $c2 = (char) i1
1909, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
1911, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
1915, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | return $r4
1916, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
1918, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1920, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if $i0 != -1 goto $r1 = new java.lang.StringBuilder
1922, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | return null
1924, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $r1 = new java.lang.StringBuilder
1926, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
1928, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | r2 = $r1
1930, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1932, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 != 13 goto (branch)
1934, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1936, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1938, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i3 != 10 goto (branch)
1940, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1946, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1948, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1950, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 != 13 goto $c2 = (char) i1
1954, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
1956, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $c2 = (char) i1
1960, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
1962, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
1966, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | return $r4
1967, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
1969, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1971, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i0 != -1 goto $r1 = new java.lang.StringBuilder
1973, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | return null
1975, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $r1 = new java.lang.StringBuilder
1977, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
1979, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r2 = $r1
1981, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1983, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 != 13 goto (branch)
1985, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
1987, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1989, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i3 != 10 goto (branch)
1991, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
1997, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
1999, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
2001, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 != 13 goto $c2 = (char) i1
2005, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
2007, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $c2 = (char) i1
2011, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2013, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
2017, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | return $r4
2018, <org.apache.commons.csv.CSVParser: boolean isClosed()> | r0 := @this: org.apache.commons.csv.CSVParser
2019, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2021, <org.apache.commons.csv.CSVParser: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
2023, <org.apache.commons.csv.CSVParser: boolean isClosed()> | return $z0
2024, <org.apache.commons.csv.Lexer: boolean isClosed()> | r0 := @this: org.apache.commons.csv.CSVParser
2026, <org.apache.commons.csv.Lexer: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2028, <org.apache.commons.csv.Lexer: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
2030, <org.apache.commons.csv.Lexer: boolean isClosed()> | return $z0
2034, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>()
2036, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | return $r2
2037, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r3 := @caughtexception
2038, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | r4 = $r3
2040, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r5 = new java.lang.IllegalStateException
2042, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r6 = new java.lang.StringBuilder
2044, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
2046, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
2048, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>()
2050, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
2052, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ")
2054, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>()
2056, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
2058, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
2060, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4)
2062, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | throw $r5
2063, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
2064, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r3 := @caughtexception
2066, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
2068, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()>()
2070, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | return $r2
2072, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r4 = $r3
2074, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r5 = new java.lang.IllegalStateException
2076, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r6 = new java.lang.StringBuilder
2078, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
2080, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
2082, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>()
2084, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
2086, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reading next record: ")
2088, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>()
2090, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
2092, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
2094, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, r4)
2096, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | throw $r5
2097, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r0 := @this: org.apache.commons.csv.CSVParser
2098, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r38 = null
2100, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2102, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | interfaceinvoke $r1.<java.util.List: void clear()>()
2104, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r39 = null
2106, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2108, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
2110, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
2112, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | l2 = $l0 + $l1
2114, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2116, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
2118, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2120, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2122, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
2124, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
2126, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2128, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2130, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
2132, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $i4 = $r9[$i3]
2134, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
2136, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
2138, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
2140, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2142, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r24 = new java.io.IOException
2144, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2146, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r31 = new java.lang.IllegalStateException
2148, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2150, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2156, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
2158, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2168, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r25 = new java.lang.StringBuilder
2170, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
2172, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
2174, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
2176, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
2178, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
2180, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
2182, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
2184, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | throw $r24
2186, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r23 = new java.lang.StringBuilder
2188, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2190, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
2192, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r39 = $r23
2194, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2196, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2200, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2202, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
2204, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2206, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2208, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
2214, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r32 = new java.lang.StringBuilder
2216, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
2218, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
2220, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2222, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2224, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
2226, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
2228, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
2230, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | throw $r31
2232, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2234, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2236, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2238, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2242, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
2244, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | if $z0 != 0 goto return r38
2246, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2248, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | return r38
2250, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l6 = $l5 + 1L
2252, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
2254, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2256, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r43 = null
2258, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2260, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | goto [?= r17 = $r43]
2262, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r17 = $r43
2266, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r18 = new org.apache.commons.csv.CSVRecord
2268, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2270, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
2272, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
2274, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $r22 = (java.lang.String[]) $r21
2276, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2278, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
2280, <org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVRecord nextRecord()> | r38 = $r18
2283, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.CSVParser
2285, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r38 = null
2287, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2289, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | interfaceinvoke $r1.<java.util.List: void clear()>()
2291, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r39 = null
2293, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2295, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
2297, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
2299, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | l2 = $l0 + $l1
2301, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2303, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
2305, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2307, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2309, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
2311, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
2313, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2315, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2317, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
2319, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $i4 = $r9[$i3]
2321, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
2323, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
2325, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
2327, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2329, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r24 = new java.io.IOException
2331, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2333, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r31 = new java.lang.IllegalStateException
2335, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2337, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2343, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
2345, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2355, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r25 = new java.lang.StringBuilder
2357, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
2359, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
2361, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
2363, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
2365, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
2367, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
2369, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
2371, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | throw $r24
2373, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r23 = new java.lang.StringBuilder
2375, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2377, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
2379, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r39 = $r23
2381, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2383, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2387, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2389, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
2391, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2393, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2395, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
2401, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r32 = new java.lang.StringBuilder
2403, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
2405, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
2407, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2409, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2411, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
2413, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
2415, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
2417, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | throw $r31
2419, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2421, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2423, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2425, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2429, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
2431, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $z0 != 0 goto return r38
2433, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2435, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | return r38
2437, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l6 = $l5 + 1L
2439, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
2441, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2443, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r43 = null
2445, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2447, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= r17 = $r43]
2449, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r17 = $r43
2453, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r18 = new org.apache.commons.csv.CSVRecord
2455, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2457, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
2459, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
2461, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r22 = (java.lang.String[]) $r21
2463, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2465, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
2467, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r38 = $r18
2470, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r0 := @this: org.apache.commons.csv.CSVParser
2472, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r38 = null
2474, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2476, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | interfaceinvoke $r1.<java.util.List: void clear()>()
2478, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r39 = null
2480, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2482, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
2484, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
2486, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | l2 = $l0 + $l1
2488, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2490, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
2492, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2494, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2496, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
2498, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
2500, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2502, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2504, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
2506, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $i4 = $r9[$i3]
2508, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
2510, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
2512, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
2514, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2516, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r24 = new java.io.IOException
2518, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2520, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r31 = new java.lang.IllegalStateException
2522, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2524, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2530, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
2532, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2542, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r25 = new java.lang.StringBuilder
2544, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
2546, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
2548, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
2550, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
2552, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
2554, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
2556, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
2558, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | throw $r24
2560, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r23 = new java.lang.StringBuilder
2562, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2564, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
2566, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r39 = $r23
2568, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2570, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2574, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2576, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
2578, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2580, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2582, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
2588, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r32 = new java.lang.StringBuilder
2590, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
2592, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
2594, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2596, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2598, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
2600, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
2602, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
2604, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | throw $r31
2606, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2608, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2610, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2612, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2616, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
2618, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z0 != 0 goto return r38
2620, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2622, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | return r38
2624, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l6 = $l5 + 1L
2626, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
2628, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2630, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r43 = null
2632, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2634, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= r17 = $r43]
2636, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r17 = $r43
2640, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r18 = new org.apache.commons.csv.CSVRecord
2642, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2644, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
2646, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
2648, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r22 = (java.lang.String[]) $r21
2650, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2652, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
2654, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r38 = $r18
2657, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r0 := @this: org.apache.commons.csv.CSVParser
2659, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r38 = null
2661, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2663, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | interfaceinvoke $r1.<java.util.List: void clear()>()
2665, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r39 = null
2667, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2669, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
2671, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
2673, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | l2 = $l0 + $l1
2675, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2677, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
2679, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2681, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2683, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
2685, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
2687, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2689, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2691, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
2693, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $i4 = $r9[$i3]
2695, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
2697, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
2699, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
2701, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2703, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r24 = new java.io.IOException
2705, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2707, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r31 = new java.lang.IllegalStateException
2709, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2711, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2717, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
2719, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2729, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r25 = new java.lang.StringBuilder
2731, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
2733, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
2735, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
2737, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
2739, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
2741, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
2743, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
2745, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | throw $r24
2747, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r23 = new java.lang.StringBuilder
2749, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2751, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
2753, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r39 = $r23
2755, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2757, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2761, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2763, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
2765, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2767, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2769, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
2775, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r32 = new java.lang.StringBuilder
2777, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
2779, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
2781, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2783, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2785, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
2787, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
2789, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
2791, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | throw $r31
2793, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2795, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2797, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2799, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2803, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
2805, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z0 != 0 goto return r38
2807, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2809, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | return r38
2811, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l6 = $l5 + 1L
2813, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
2815, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2817, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r43 = null
2819, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
2821, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= r17 = $r43]
2823, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r17 = $r43
2827, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r18 = new org.apache.commons.csv.CSVRecord
2829, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2831, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
2833, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
2835, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r22 = (java.lang.String[]) $r21
2837, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2839, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
2841, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r38 = $r18
2844, <org.apache.commons.csv.Token: void reset()> | r0 := @this: org.apache.commons.csv.CSVParser
2846, <org.apache.commons.csv.Token: void reset()> | r38 = null
2848, <org.apache.commons.csv.Token: void reset()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2850, <org.apache.commons.csv.Token: void reset()> | interfaceinvoke $r1.<java.util.List: void clear()>()
2852, <org.apache.commons.csv.Token: void reset()> | r39 = null
2854, <org.apache.commons.csv.Token: void reset()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2856, <org.apache.commons.csv.Token: void reset()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
2858, <org.apache.commons.csv.Token: void reset()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
2860, <org.apache.commons.csv.Token: void reset()> | l2 = $l0 + $l1
2862, <org.apache.commons.csv.Token: void reset()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2864, <org.apache.commons.csv.Token: void reset()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
2866, <org.apache.commons.csv.Token: void reset()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
2868, <org.apache.commons.csv.Token: void reset()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2870, <org.apache.commons.csv.Token: void reset()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
2872, <org.apache.commons.csv.Token: void reset()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
2874, <org.apache.commons.csv.Token: void reset()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2876, <org.apache.commons.csv.Token: void reset()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2878, <org.apache.commons.csv.Token: void reset()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
2880, <org.apache.commons.csv.Token: void reset()> | $i4 = $r9[$i3]
2882, <org.apache.commons.csv.Token: void reset()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
2884, <org.apache.commons.csv.Token: void reset()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
2886, <org.apache.commons.csv.Token: void reset()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
2888, <org.apache.commons.csv.Token: void reset()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2890, <org.apache.commons.csv.Token: void reset()> | $r24 = new java.io.IOException
2892, <org.apache.commons.csv.Token: void reset()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2894, <org.apache.commons.csv.Token: void reset()> | $r31 = new java.lang.IllegalStateException
2896, <org.apache.commons.csv.Token: void reset()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2898, <org.apache.commons.csv.Token: void reset()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2904, <org.apache.commons.csv.Token: void reset()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
2906, <org.apache.commons.csv.Token: void reset()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2916, <org.apache.commons.csv.Token: void reset()> | $r25 = new java.lang.StringBuilder
2918, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
2920, <org.apache.commons.csv.Token: void reset()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
2922, <org.apache.commons.csv.Token: void reset()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
2924, <org.apache.commons.csv.Token: void reset()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
2926, <org.apache.commons.csv.Token: void reset()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
2928, <org.apache.commons.csv.Token: void reset()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
2930, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
2932, <org.apache.commons.csv.Token: void reset()> | throw $r24
2934, <org.apache.commons.csv.Token: void reset()> | $r23 = new java.lang.StringBuilder
2936, <org.apache.commons.csv.Token: void reset()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
2938, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
2940, <org.apache.commons.csv.Token: void reset()> | r39 = $r23
2942, <org.apache.commons.csv.Token: void reset()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
2944, <org.apache.commons.csv.Token: void reset()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2948, <org.apache.commons.csv.Token: void reset()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2950, <org.apache.commons.csv.Token: void reset()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
2952, <org.apache.commons.csv.Token: void reset()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2954, <org.apache.commons.csv.Token: void reset()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2956, <org.apache.commons.csv.Token: void reset()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
2962, <org.apache.commons.csv.Token: void reset()> | $r32 = new java.lang.StringBuilder
2964, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
2966, <org.apache.commons.csv.Token: void reset()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
2968, <org.apache.commons.csv.Token: void reset()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2970, <org.apache.commons.csv.Token: void reset()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2972, <org.apache.commons.csv.Token: void reset()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
2974, <org.apache.commons.csv.Token: void reset()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
2976, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
2978, <org.apache.commons.csv.Token: void reset()> | throw $r31
2980, <org.apache.commons.csv.Token: void reset()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
2982, <org.apache.commons.csv.Token: void reset()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2984, <org.apache.commons.csv.Token: void reset()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
2986, <org.apache.commons.csv.Token: void reset()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
2990, <org.apache.commons.csv.Token: void reset()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
2992, <org.apache.commons.csv.Token: void reset()> | if $z0 != 0 goto return r38
2994, <org.apache.commons.csv.Token: void reset()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
2996, <org.apache.commons.csv.Token: void reset()> | return r38
2998, <org.apache.commons.csv.Token: void reset()> | $l6 = $l5 + 1L
3000, <org.apache.commons.csv.Token: void reset()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
3002, <org.apache.commons.csv.Token: void reset()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
3004, <org.apache.commons.csv.Token: void reset()> | $r43 = null
3006, <org.apache.commons.csv.Token: void reset()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
3008, <org.apache.commons.csv.Token: void reset()> | goto [?= r17 = $r43]
3010, <org.apache.commons.csv.Token: void reset()> | r17 = $r43
3014, <org.apache.commons.csv.Token: void reset()> | $r18 = new org.apache.commons.csv.CSVRecord
3016, <org.apache.commons.csv.Token: void reset()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3018, <org.apache.commons.csv.Token: void reset()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
3020, <org.apache.commons.csv.Token: void reset()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
3022, <org.apache.commons.csv.Token: void reset()> | $r22 = (java.lang.String[]) $r21
3024, <org.apache.commons.csv.Token: void reset()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
3026, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
3028, <org.apache.commons.csv.Token: void reset()> | r38 = $r18
3031, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r0 := @this: org.apache.commons.csv.CSVParser
3033, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r38 = null
3035, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3037, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | interfaceinvoke $r1.<java.util.List: void clear()>()
3039, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r39 = null
3041, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
3043, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
3045, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
3047, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | l2 = $l0 + $l1
3049, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3051, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
3053, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
3055, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3057, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
3059, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
3061, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3063, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3065, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
3067, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $i4 = $r9[$i3]
3069, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
3071, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
3073, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
3075, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3077, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r24 = new java.io.IOException
3079, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
3081, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r31 = new java.lang.IllegalStateException
3083, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
3085, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3091, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
3093, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3103, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r25 = new java.lang.StringBuilder
3105, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
3107, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
3109, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
3111, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
3113, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
3115, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
3117, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
3119, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | throw $r24
3121, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r23 = new java.lang.StringBuilder
3123, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
3125, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
3127, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r39 = $r23
3129, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
3131, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3135, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3137, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
3139, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3141, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3143, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
3149, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r32 = new java.lang.StringBuilder
3151, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
3153, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
3155, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3157, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3159, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
3161, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
3163, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
3165, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | throw $r31
3167, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3169, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3171, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3173, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3177, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
3179, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $z0 != 0 goto return r38
3181, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
3183, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | return r38
3185, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l6 = $l5 + 1L
3187, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
3189, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
3191, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r43 = null
3193, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
3195, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= r17 = $r43]
3197, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r17 = $r43
3201, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r18 = new org.apache.commons.csv.CSVRecord
3203, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3205, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
3207, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
3209, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r22 = (java.lang.String[]) $r21
3211, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
3213, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
3215, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r38 = $r18
3218, <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> | $r0 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] $VALUES>
3219, <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> | $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
3221, <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> | $r2 = (org.apache.commons.csv.Token$Type[]) $r1
3223, <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type[] values()> | return $r2
3225, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
3227, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
3229, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | if $z0 == 0 goto r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3231, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $r3 = new java.util.NoSuchElementException
3233, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | r4 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3235, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("CSVParser has been closed")
3237, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | throw $r3
3239, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = null
3241, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | if r4 != null goto return r4
3243, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
3245, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | return r4
3249, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $r2 = new java.util.NoSuchElementException
3253, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more CSV records available")
3255, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | throw $r2
3256, <org.apache.commons.csv.Token: java.lang.String toString()> | r1 := @this: org.apache.commons.csv.Token
3257, <org.apache.commons.csv.Token: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
3259, <org.apache.commons.csv.Token: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
3261, <org.apache.commons.csv.Token: java.lang.String toString()> | $r2 = r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3263, <org.apache.commons.csv.Token: java.lang.String toString()> | $r3 = virtualinvoke $r2.<org.apache.commons.csv.Token$Type: java.lang.String name()>()
3265, <org.apache.commons.csv.Token: java.lang.String toString()> | $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
3267, <org.apache.commons.csv.Token: java.lang.String toString()> | $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [")
3269, <org.apache.commons.csv.Token: java.lang.String toString()> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3271, <org.apache.commons.csv.Token: java.lang.String toString()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
3273, <org.apache.commons.csv.Token: java.lang.String toString()> | $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
3275, <org.apache.commons.csv.Token: java.lang.String toString()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
3277, <org.apache.commons.csv.Token: java.lang.String toString()> | $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
3279, <org.apache.commons.csv.Token: java.lang.String toString()> | return $r10
3280, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r1 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
3281, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r0 = new java.lang.UnsupportedOperationException
3283, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>()
3285, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | throw $r0
3287, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | specialinvoke r0.<java.io.BufferedReader: void mark(int)>(1)
3289, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
3291, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | specialinvoke r0.<java.io.BufferedReader: void reset()>()
3293, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | return i0
3295, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | i0 = specialinvoke r0.<java.io.BufferedReader: int read()>()
3297, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i0 == 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
3299, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i0 != 10 goto (branch)
3301, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
3303, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
3305, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i0 != -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
3307, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i4 != 13 goto $l5 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
3313, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
3315, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
3317, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i1 == 13 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
3319, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
3323, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i2 == 10 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
3325, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
3329, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i3 == -1 goto r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = i0
3335, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $l6 = $l5 + 1L
3337, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l6
3341, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $l7 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
3343, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $l8 = $l7 + 1L
3345, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l8
3347, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i9 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
3349, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | return $i9
3350, <org.apache.commons.csv.Lexer: boolean isClosed()> | r0 := @this: org.apache.commons.csv.Lexer
3351, <org.apache.commons.csv.Lexer: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3353, <org.apache.commons.csv.Lexer: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
3356, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | r0 := @this: org.apache.commons.csv.Lexer
3358, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3360, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
3362, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | return $z0
3363, <org.apache.commons.csv.Token: void reset()> | r0 := @this: org.apache.commons.csv.Token
3364, <org.apache.commons.csv.Token: void reset()> | $r1 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3366, <org.apache.commons.csv.Token: void reset()> | virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0)
3368, <org.apache.commons.csv.Token: void reset()> | $r2 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
3370, <org.apache.commons.csv.Token: void reset()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r2
3372, <org.apache.commons.csv.Token: void reset()> | r0.<org.apache.commons.csv.Token: boolean isReady> = 0
3374, <org.apache.commons.csv.Token: void reset()> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 0
3376, <org.apache.commons.csv.Token: void reset()> | return
3377, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r0 := @this: org.apache.commons.csv.Lexer
3378, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3 := @parameter0: org.apache.commons.csv.Token
3380, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3382, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3384, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3386, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3388, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3390, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3392, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3394, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3396, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3398, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3402, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3404, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | i1 = i2
3408, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3410, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3414, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3416, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z11 == 0 goto (branch)
3418, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3422, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
3424, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | return r3
3426, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3428, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
3430, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3432, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3434, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3436, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3438, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3444, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
3448, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3450, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
3452, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3454, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3456, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3460, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
3462, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3464, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3466, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3468, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
3472, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3474, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
3476, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
3478, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3482, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
3484, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $r20 != $r21 goto return r3
3486, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3490, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3492, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $c0 = (char) i2
3494, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3496, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
3498, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3500, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3504, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3506, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3510, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3514, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3518, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $c0 = (char) i2]
3522, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z14 == 0 goto (branch)
3524, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3526, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3528, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
3530, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
3534, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3536, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3538, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
3544, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3546, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
3548, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3554, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3556, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3558, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3560, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
3562, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
3571, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r0 := @this: org.apache.commons.csv.Lexer
3573, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3 := @parameter0: org.apache.commons.csv.Token
3575, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3577, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3579, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3581, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3583, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3585, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3587, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3589, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3591, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3593, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3597, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3599, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i1 = i2
3603, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3605, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3609, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3611, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z11 == 0 goto (branch)
3613, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3617, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
3619, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | return r3
3621, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3623, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
3625, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3627, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3629, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3631, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3633, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3639, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
3643, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3645, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
3647, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3649, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3651, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3655, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
3657, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3659, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3661, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3663, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
3667, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3669, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
3671, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
3673, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3677, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
3679, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $r20 != $r21 goto return r3
3681, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3685, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3687, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $c0 = (char) i2
3689, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3691, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
3693, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3695, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3699, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3701, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3705, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3709, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3713, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= $c0 = (char) i2]
3717, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z14 == 0 goto (branch)
3719, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3721, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3723, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
3725, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
3729, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3731, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3733, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
3739, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3741, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
3743, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3749, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3751, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3753, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3755, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
3757, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
3766, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r0 := @this: org.apache.commons.csv.Lexer
3768, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3 := @parameter0: org.apache.commons.csv.Token
3770, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3772, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3774, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3776, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3778, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3780, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3782, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3784, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3786, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3788, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3792, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3794, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i1 = i2
3798, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3800, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3804, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3806, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z11 == 0 goto (branch)
3808, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3812, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
3814, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | return r3
3816, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3818, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
3820, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3822, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3824, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3826, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3828, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3834, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
3838, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3840, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
3842, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3844, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3846, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3850, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
3852, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3854, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3856, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3858, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
3862, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3864, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
3866, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
3868, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3872, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
3874, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $r20 != $r21 goto return r3
3876, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3880, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3882, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $c0 = (char) i2
3884, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3886, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
3888, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3890, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3894, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3896, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3900, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3904, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3908, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= $c0 = (char) i2]
3912, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z14 == 0 goto (branch)
3914, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3916, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3918, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
3920, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
3924, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3926, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3928, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
3934, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3936, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
3938, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3944, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3946, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3948, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3950, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
3952, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
3961, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0 := @this: org.apache.commons.csv.Lexer
3963, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3 := @parameter0: org.apache.commons.csv.Token
3965, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3967, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3969, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3971, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3973, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3975, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3977, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3979, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3981, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3983, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3987, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3989, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i1 = i2
3993, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3995, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3999, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4001, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z11 == 0 goto (branch)
4003, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4007, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4009, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | return r3
4011, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4013, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4015, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4017, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4019, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4021, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4023, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4029, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4033, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4035, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4037, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4039, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4041, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4045, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4047, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4049, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4051, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4053, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4057, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4059, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4061, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4063, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4067, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4069, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $r20 != $r21 goto return r3
4071, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4075, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4077, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c0 = (char) i2
4079, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4081, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4083, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4085, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4089, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4091, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4095, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4099, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4103, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= $c0 = (char) i2]
4107, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z14 == 0 goto (branch)
4109, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4111, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4113, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4115, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4119, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4121, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4123, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4129, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4131, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4133, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4139, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4141, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4143, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4145, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4147, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4156, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r0 := @this: org.apache.commons.csv.Lexer
4158, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4160, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4162, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4164, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4166, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4168, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4170, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4172, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4174, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4176, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4178, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4182, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4184, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i1 = i2
4188, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4190, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4194, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4196, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z11 == 0 goto (branch)
4198, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4202, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4204, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | return r3
4206, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4208, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4210, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4212, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4214, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4216, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4218, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4224, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4228, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4230, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4232, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4234, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4236, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4240, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4242, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4244, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4246, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4248, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4252, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4254, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4256, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4258, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4262, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4264, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $r20 != $r21 goto return r3
4266, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4270, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4272, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $c0 = (char) i2
4274, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4276, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4278, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4280, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4284, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4286, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4290, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4294, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4298, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | goto [?= $c0 = (char) i2]
4302, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z14 == 0 goto (branch)
4304, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4306, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4308, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4310, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4314, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4316, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4318, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4324, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4326, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4328, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4334, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4336, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4338, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4340, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4342, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4351, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r0 := @this: org.apache.commons.csv.Lexer
4353, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4355, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4357, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4359, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4361, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4363, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4365, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4367, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4369, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4371, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4373, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4377, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4379, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i1 = i2
4383, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4385, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4389, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4391, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z11 == 0 goto (branch)
4393, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4397, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4399, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | return r3
4401, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4403, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4405, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4407, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4409, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4411, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4413, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4419, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4423, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4425, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4427, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4429, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4431, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4435, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4437, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4439, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4441, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4443, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4447, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4449, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4451, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4453, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4457, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4459, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $r20 != $r21 goto return r3
4461, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4465, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4467, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c0 = (char) i2
4469, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4471, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4473, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4475, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4479, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4481, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4485, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4489, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4493, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $c0 = (char) i2]
4497, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z14 == 0 goto (branch)
4499, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4501, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4503, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4505, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4509, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4511, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4513, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4519, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4521, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4523, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4529, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4531, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4533, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4535, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4537, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4546, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r0 := @this: org.apache.commons.csv.Lexer
4548, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4550, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4552, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4554, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4556, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4558, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4560, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4562, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4564, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4566, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4568, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4572, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4574, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i1 = i2
4578, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4580, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4584, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4586, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z11 == 0 goto (branch)
4588, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4592, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4594, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | return r3
4596, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4598, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4600, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4602, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4604, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4606, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4608, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4614, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4618, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4620, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4622, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4624, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4626, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4630, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4632, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4634, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4636, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4638, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4642, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4644, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4646, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4648, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4652, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4654, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $r20 != $r21 goto return r3
4656, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4660, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4662, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $c0 = (char) i2
4664, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4666, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4668, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4670, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4674, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4676, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4680, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4684, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4688, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | goto [?= $c0 = (char) i2]
4692, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z14 == 0 goto (branch)
4694, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4696, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4698, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4700, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4704, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4706, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4708, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4714, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4716, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4718, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4724, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4726, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4728, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4730, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4732, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4741, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r0 := @this: org.apache.commons.csv.Lexer
4743, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4745, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4747, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4749, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4751, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4753, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4755, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4757, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4759, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4761, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4763, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4767, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4769, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i1 = i2
4773, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4775, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4779, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4781, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z11 == 0 goto (branch)
4783, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4787, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4789, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | return r3
4791, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4793, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4795, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4797, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4799, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4801, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4803, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4809, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4813, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4815, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4817, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4819, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4821, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4825, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4827, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4829, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4831, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4833, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4837, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4839, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4841, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4843, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4847, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4849, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $r20 != $r21 goto return r3
4851, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4855, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4857, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $c0 = (char) i2
4859, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4861, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4863, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4865, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4869, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4871, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4875, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4879, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4883, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | goto [?= $c0 = (char) i2]
4887, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z14 == 0 goto (branch)
4889, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4891, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4893, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4895, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4899, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4901, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4903, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4909, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4911, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4913, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4919, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4921, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4923, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4925, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4927, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4936, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r0 := @this: org.apache.commons.csv.Lexer
4938, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4940, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4942, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4944, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4946, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4948, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4950, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4952, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4954, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4956, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4958, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4962, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4964, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i1 = i2
4968, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4970, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4974, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4976, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z11 == 0 goto (branch)
4978, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4982, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4984, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | return r3
4986, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4988, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4990, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4992, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4994, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4996, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4998, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
5004, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
5008, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5010, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
5012, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5014, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5016, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5020, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
5022, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
5024, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5026, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
5028, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
5032, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5034, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
5036, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
5038, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
5042, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
5044, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $r20 != $r21 goto return r3
5046, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
5050, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5052, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $c0 = (char) i2
5054, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5056, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
5058, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5060, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5064, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5066, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5070, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5074, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5078, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | goto [?= $c0 = (char) i2]
5082, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z14 == 0 goto (branch)
5084, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
5086, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
5088, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
5090, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
5094, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
5096, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
5098, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
5104, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5106, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
5108, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5114, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
5116, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5118, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
5120, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
5122, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
5131, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r0 := @this: org.apache.commons.csv.Lexer
5133, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3 := @parameter0: org.apache.commons.csv.Token
5135, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5137, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
5139, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5141, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5143, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
5145, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
5147, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
5149, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
5151, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
5153, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
5157, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
5159, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i1 = i2
5163, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5165, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5169, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5171, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z11 == 0 goto (branch)
5173, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5177, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
5179, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | return r3
5181, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5183, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
5185, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5187, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
5189, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5191, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
5193, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
5199, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
5203, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5205, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
5207, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5209, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
5211, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5215, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
5217, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
5219, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5221, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
5223, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
5227, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5229, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
5231, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
5233, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
5237, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
5239, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $r20 != $r21 goto return r3
5241, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
5245, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5247, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $c0 = (char) i2
5249, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5251, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
5253, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5255, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5259, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5261, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
5265, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5269, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5273, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= $c0 = (char) i2]
5277, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z14 == 0 goto (branch)
5279, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
5281, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
5283, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
5285, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
5289, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
5291, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
5293, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
5299, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5301, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
5303, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
5309, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
5311, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5313, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
5315, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
5317, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
5326, <org.apache.commons.csv.CSVParser: void close()> | r0 := @this: org.apache.commons.csv.CSVParser
5327, <org.apache.commons.csv.CSVParser: void close()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
5329, <org.apache.commons.csv.CSVParser: void close()> | if $r1 == null goto return
5331, <org.apache.commons.csv.CSVParser: void close()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
5333, <org.apache.commons.csv.CSVParser: void close()> | return
5335, <org.apache.commons.csv.CSVParser: void close()> | virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>()
5338, <org.apache.commons.csv.Lexer: void close()> | r0 := @this: org.apache.commons.csv.CSVParser
5340, <org.apache.commons.csv.Lexer: void close()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
5342, <org.apache.commons.csv.Lexer: void close()> | if $r1 == null goto return
5344, <org.apache.commons.csv.Lexer: void close()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
5346, <org.apache.commons.csv.Lexer: void close()> | return
5348, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke $r2.<org.apache.commons.csv.Lexer: void close()>()
5351, <org.apache.commons.csv.Lexer: void close()> | r0 := @this: org.apache.commons.csv.Lexer
5352, <org.apache.commons.csv.Lexer: void close()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5354, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>()
5357, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r0 := @this: org.apache.commons.csv.Lexer
5359, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5361, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: void close()>()
5363, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | return
5364, <org.apache.commons.csv.CSVPrinter: void close()> | r0 := @this: org.apache.commons.csv.CSVPrinter
5365, <org.apache.commons.csv.CSVPrinter: void close()> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0)
5367, <org.apache.commons.csv.CSVPrinter: void close()> | return
5368, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | r0 := @this: org.apache.commons.csv.CSVPrinter
5370, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0)
5372, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | return
5373, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
5374, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed> = 1
5376, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1
5378, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | specialinvoke r0.<java.io.BufferedReader: void close()>()
5381, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r0 := @this: org.apache.commons.csv.Lexer
5382, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5384, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
5386, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | return $l0
5387, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | r0 := @this: org.apache.commons.csv.Lexer
5389, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5391, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
5393, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | return $l0
5395, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i1 := @parameter0: int
5397, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if i1 != 13 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
5399, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r3 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5401, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
5403, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $i0 = virtualinvoke $r3.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
5405, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $i0 != 10 goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
5407, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5411, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | i1 = virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5413, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r5 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
5415, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $r5 != null goto $r6 = r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol>
5417, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = "\r\n"
5423, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if $r6 != null goto (branch)
5425, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if i1 != 10 goto (branch)
5427, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if i1 == 10 goto $z0 = 1
5429, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r2 = <org.apache.commons.csv.Lexer: java.lang.String LF_STRING>
5431, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if i1 != 13 goto (branch)
5433, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r2
5435, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | goto [?= (branch)]
5439, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $r1 = <org.apache.commons.csv.Lexer: java.lang.String CR_STRING>
5443, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | r0.<org.apache.commons.csv.Lexer: java.lang.String firstEol> = $r1
5447, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | if i1 != 13 goto $z0 = 0
5449, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z0 = 1
5453, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | $z0 = 0
5455, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | goto [?= return $z0]
5457, <org.apache.commons.csv.Lexer: boolean readEndOfLine(int)> | return $z0
5460, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r1 := @this: org.apache.commons.csv.Lexer
5461, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0 := @parameter0: org.apache.commons.csv.Token
5463, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
5465, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5467, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5469, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5471, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
5473, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5475, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
5477, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5479, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5481, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5483, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5485, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
5487, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
5489, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
5493, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5495, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5497, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5499, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c8 = (char) i11
5501, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
5503, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5505, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
5507, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c10 = (char) $i9
5509, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
5511, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= (branch)]
5515, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c7 = (char) i6
5517, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
5523, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5525, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5527, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5529, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
5531, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
5533, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5535, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5537, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5539, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5541, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5543, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c5 = (char) i12
5545, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
5551, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5553, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
5555, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5557, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
5559, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5561, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
5563, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | return r0
5565, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5569, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5571, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
5573, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.Token: boolean isReady> = 1
5577, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z5 == 0 goto $c3 = (char) i13
5579, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
5581, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c3 = (char) i13
5583, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
5587, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
5589, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5591, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r12 = new java.io.IOException
5595, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r13 = new java.lang.StringBuilder
5597, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
5599, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
5601, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5603, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
5605, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
5607, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
5609, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
5611, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | throw $r12
5613, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5615, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r4 = new java.io.IOException
5617, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5619, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r5 = new java.lang.StringBuilder
5621, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
5623, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
5625, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
5627, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
5629, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
5631, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
5633, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | throw $r4
5635, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c1 = (char) i11
5637, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
5642, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r1 := @this: org.apache.commons.csv.Lexer
5644, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0 := @parameter0: org.apache.commons.csv.Token
5646, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
5648, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5650, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5652, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5654, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
5656, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5658, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
5660, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5662, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5664, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5666, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5668, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
5670, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
5672, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
5676, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5678, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5680, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5682, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c8 = (char) i11
5684, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
5686, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5688, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
5690, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c10 = (char) $i9
5692, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
5694, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | goto [?= (branch)]
5698, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c7 = (char) i6
5700, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
5706, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5708, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5710, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5712, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
5714, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
5716, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5718, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5720, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5722, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5724, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5726, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c5 = (char) i12
5728, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
5734, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5736, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
5738, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5740, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
5742, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5744, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
5746, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | return r0
5748, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5750, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5752, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5754, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
5756, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.Token: boolean isReady> = 1
5760, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z5 == 0 goto $c3 = (char) i13
5762, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
5764, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c3 = (char) i13
5766, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
5770, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
5772, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5774, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r12 = new java.io.IOException
5778, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r13 = new java.lang.StringBuilder
5780, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
5782, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
5784, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5786, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
5788, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
5790, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
5792, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
5794, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | throw $r12
5796, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5798, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r4 = new java.io.IOException
5800, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5802, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r5 = new java.lang.StringBuilder
5804, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
5806, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
5808, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
5810, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
5812, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
5814, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
5816, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | throw $r4
5818, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $c1 = (char) i11
5820, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
5825, <org.apache.commons.csv.Lexer: int readEscape()> | r1 := @this: org.apache.commons.csv.Lexer
5827, <org.apache.commons.csv.Lexer: int readEscape()> | r0 := @parameter0: org.apache.commons.csv.Token
5829, <org.apache.commons.csv.Lexer: int readEscape()> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
5831, <org.apache.commons.csv.Lexer: int readEscape()> | l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5833, <org.apache.commons.csv.Lexer: int readEscape()> | $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5835, <org.apache.commons.csv.Lexer: int readEscape()> | i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5837, <org.apache.commons.csv.Lexer: int readEscape()> | $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
5839, <org.apache.commons.csv.Lexer: int readEscape()> | if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5841, <org.apache.commons.csv.Lexer: int readEscape()> | $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
5843, <org.apache.commons.csv.Lexer: int readEscape()> | $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
5845, <org.apache.commons.csv.Lexer: int readEscape()> | if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5847, <org.apache.commons.csv.Lexer: int readEscape()> | $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5849, <org.apache.commons.csv.Lexer: int readEscape()> | i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
5851, <org.apache.commons.csv.Lexer: int readEscape()> | $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
5853, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
5855, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
5859, <org.apache.commons.csv.Lexer: int readEscape()> | if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5861, <org.apache.commons.csv.Lexer: int readEscape()> | $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5863, <org.apache.commons.csv.Lexer: int readEscape()> | $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5865, <org.apache.commons.csv.Lexer: int readEscape()> | $c8 = (char) i11
5867, <org.apache.commons.csv.Lexer: int readEscape()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
5869, <org.apache.commons.csv.Lexer: int readEscape()> | $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5871, <org.apache.commons.csv.Lexer: int readEscape()> | $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
5873, <org.apache.commons.csv.Lexer: int readEscape()> | $c10 = (char) $i9
5875, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
5877, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= (branch)]
5881, <org.apache.commons.csv.Lexer: int readEscape()> | $c7 = (char) i6
5883, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
5889, <org.apache.commons.csv.Lexer: int readEscape()> | if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5891, <org.apache.commons.csv.Lexer: int readEscape()> | $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5893, <org.apache.commons.csv.Lexer: int readEscape()> | $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
5895, <org.apache.commons.csv.Lexer: int readEscape()> | $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
5897, <org.apache.commons.csv.Lexer: int readEscape()> | $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
5899, <org.apache.commons.csv.Lexer: int readEscape()> | if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5901, <org.apache.commons.csv.Lexer: int readEscape()> | $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5903, <org.apache.commons.csv.Lexer: int readEscape()> | $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5905, <org.apache.commons.csv.Lexer: int readEscape()> | i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5907, <org.apache.commons.csv.Lexer: int readEscape()> | $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5909, <org.apache.commons.csv.Lexer: int readEscape()> | $c5 = (char) i12
5911, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
5917, <org.apache.commons.csv.Lexer: int readEscape()> | i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5919, <org.apache.commons.csv.Lexer: int readEscape()> | $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
5921, <org.apache.commons.csv.Lexer: int readEscape()> | if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5923, <org.apache.commons.csv.Lexer: int readEscape()> | $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
5925, <org.apache.commons.csv.Lexer: int readEscape()> | $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
5927, <org.apache.commons.csv.Lexer: int readEscape()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
5929, <org.apache.commons.csv.Lexer: int readEscape()> | return r0
5931, <org.apache.commons.csv.Lexer: int readEscape()> | if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5933, <org.apache.commons.csv.Lexer: int readEscape()> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
5935, <org.apache.commons.csv.Lexer: int readEscape()> | $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
5937, <org.apache.commons.csv.Lexer: int readEscape()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
5939, <org.apache.commons.csv.Lexer: int readEscape()> | r0.<org.apache.commons.csv.Token: boolean isReady> = 1
5943, <org.apache.commons.csv.Lexer: int readEscape()> | if $z5 == 0 goto $c3 = (char) i13
5945, <org.apache.commons.csv.Lexer: int readEscape()> | $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
5947, <org.apache.commons.csv.Lexer: int readEscape()> | $c3 = (char) i13
5949, <org.apache.commons.csv.Lexer: int readEscape()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
5953, <org.apache.commons.csv.Lexer: int readEscape()> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
5955, <org.apache.commons.csv.Lexer: int readEscape()> | if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5957, <org.apache.commons.csv.Lexer: int readEscape()> | $r12 = new java.io.IOException
5961, <org.apache.commons.csv.Lexer: int readEscape()> | $r13 = new java.lang.StringBuilder
5963, <org.apache.commons.csv.Lexer: int readEscape()> | specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
5965, <org.apache.commons.csv.Lexer: int readEscape()> | $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
5967, <org.apache.commons.csv.Lexer: int readEscape()> | $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
5969, <org.apache.commons.csv.Lexer: int readEscape()> | $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
5971, <org.apache.commons.csv.Lexer: int readEscape()> | $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
5973, <org.apache.commons.csv.Lexer: int readEscape()> | $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
5975, <org.apache.commons.csv.Lexer: int readEscape()> | specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
5977, <org.apache.commons.csv.Lexer: int readEscape()> | throw $r12
5979, <org.apache.commons.csv.Lexer: int readEscape()> | if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5981, <org.apache.commons.csv.Lexer: int readEscape()> | $r4 = new java.io.IOException
5983, <org.apache.commons.csv.Lexer: int readEscape()> | $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
5985, <org.apache.commons.csv.Lexer: int readEscape()> | $r5 = new java.lang.StringBuilder
5987, <org.apache.commons.csv.Lexer: int readEscape()> | specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
5989, <org.apache.commons.csv.Lexer: int readEscape()> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
5991, <org.apache.commons.csv.Lexer: int readEscape()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
5993, <org.apache.commons.csv.Lexer: int readEscape()> | $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
5995, <org.apache.commons.csv.Lexer: int readEscape()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
5997, <org.apache.commons.csv.Lexer: int readEscape()> | specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
5999, <org.apache.commons.csv.Lexer: int readEscape()> | throw $r4
6001, <org.apache.commons.csv.Lexer: int readEscape()> | $c1 = (char) i11
6003, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
6008, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1 := @this: org.apache.commons.csv.Lexer
6010, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0 := @parameter0: org.apache.commons.csv.Token
6012, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
6014, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
6016, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6018, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6020, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
6022, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
6024, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
6026, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
6028, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
6030, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6032, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
6034, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
6036, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
6038, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
6042, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6044, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6046, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6048, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c8 = (char) i11
6050, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
6052, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6054, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
6056, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c10 = (char) $i9
6058, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
6060, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= (branch)]
6064, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c7 = (char) i6
6066, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
6072, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
6074, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6076, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
6078, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
6080, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
6082, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6084, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6086, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6088, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6090, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6092, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c5 = (char) i12
6094, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
6100, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6102, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
6104, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
6106, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
6108, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
6110, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
6112, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | return r0
6114, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
6116, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
6118, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
6120, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
6122, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0.<org.apache.commons.csv.Token: boolean isReady> = 1
6126, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z5 == 0 goto $c3 = (char) i13
6128, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
6130, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c3 = (char) i13
6132, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
6136, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
6138, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6140, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r12 = new java.io.IOException
6144, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r13 = new java.lang.StringBuilder
6146, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
6148, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
6150, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
6152, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
6154, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
6156, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
6158, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
6160, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | throw $r12
6162, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6164, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r4 = new java.io.IOException
6166, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6168, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r5 = new java.lang.StringBuilder
6170, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
6172, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
6174, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
6176, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
6178, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
6180, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
6182, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | throw $r4
6184, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c1 = (char) i11
6186, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
6191, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1 := @this: org.apache.commons.csv.Lexer
6193, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0 := @parameter0: org.apache.commons.csv.Token
6195, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0.<org.apache.commons.csv.Token: boolean isQuoted> = 1
6197, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | l0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
6199, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6201, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i11 = virtualinvoke $r33.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6203, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z8 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i11)
6205, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z8 == 0 goto $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
6207, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z7 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
6209, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z0 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i11)
6211, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z7 == 0 goto i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
6213, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r31 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6215, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i6 = virtualinvoke r1.<org.apache.commons.csv.Lexer: int readEscape()>()
6217, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r30 = r1.<org.apache.commons.csv.Lexer: char[] delimiter>
6219, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r30)
6221, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= $r33 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
6225, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if i6 != -1 goto $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6227, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r26 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6229, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r24 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6231, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c8 = (char) i11
6233, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
6235, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r28 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6237, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $i9 = virtualinvoke $r28.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
6239, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c10 = (char) $i9
6241, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10)
6243, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= (branch)]
6247, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c7 = (char) i6
6249, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
6255, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z0 == 0 goto $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
6257, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r10 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6259, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z1 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i11)
6261, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
6263, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z2 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>($i2)
6265, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z2 == 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6267, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r21 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6269, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6271, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i12 = virtualinvoke $r21.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6273, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r22 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6275, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c5 = (char) i12
6277, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
6283, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i13 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6285, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z3 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i13)
6287, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z3 == 0 goto $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
6289, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r20 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
6291, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i13)
6293, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r20
6295, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | return r0
6297, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z4 == 0 goto $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
6299, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
6301, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z5 = virtualinvoke r1.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i13)
6303, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
6305, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0.<org.apache.commons.csv.Token: boolean isReady> = 1
6309, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z5 == 0 goto $c3 = (char) i13
6311, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r18 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
6313, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c3 = (char) i13
6315, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r18
6319, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
6321, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z6 != 0 goto $r11 = r1.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6323, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r12 = new java.io.IOException
6327, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r13 = new java.lang.StringBuilder
6329, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
6331, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
6333, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $l4 = virtualinvoke r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
6335, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4)
6337, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid char between encapsulated token and delimiter")
6339, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
6341, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r17)
6343, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | throw $r12
6345, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z1 == 0 goto $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6347, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r4 = new java.io.IOException
6349, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r2 = r0.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6351, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r5 = new java.lang.StringBuilder
6353, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
6355, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(startline ")
6357, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
6359, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") EOF reached before encapsulated token finished")
6361, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
6363, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9)
6365, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | throw $r4
6367, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c1 = (char) i11
6369, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
6375, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r1 := @parameter0: org.apache.commons.csv.Token
6377, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i6 := @parameter1: int
6379, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
6381, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
6383, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
6385, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
6387, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
6389, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
6391, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
6393, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
6395, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
6397, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
6399, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
6401, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
6407, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
6409, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
6411, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
6413, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
6419, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6421, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
6423, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6425, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
6427, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6429, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
6431, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
6433, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
6435, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
6437, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6439, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6441, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6443, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6445, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $c3 = (char) i6
6447, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
6449, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6451, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
6453, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $c5 = (char) $i4
6455, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
6457, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= (branch)]
6461, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $c2 = (char) i1
6463, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
6469, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $c0 = (char) i6
6471, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
6475, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6477, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
6481, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | if $z5 == 0 goto return r1
6483, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6485, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | return r1
6487, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
6490, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r0 := @this: org.apache.commons.csv.Lexer
6492, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1 := @parameter0: org.apache.commons.csv.Token
6494, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i6 := @parameter1: int
6496, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
6498, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
6500, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
6502, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
6504, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
6506, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
6508, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
6510, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
6512, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
6514, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
6516, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
6518, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
6524, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
6526, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
6528, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
6530, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
6536, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6538, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
6540, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6542, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
6544, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6546, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
6548, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
6550, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
6552, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
6554, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6556, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6558, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6560, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6562, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c3 = (char) i6
6564, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
6566, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
6568, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
6570, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c5 = (char) $i4
6572, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
6574, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= (branch)]
6578, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c2 = (char) i1
6580, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
6586, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c0 = (char) i6
6588, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
6592, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
6594, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
6598, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z5 == 0 goto return r1
6600, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6602, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | return r1
6604, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
6608, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | z1 := @parameter0: boolean
6610, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
6612, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6614, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
6616, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6618, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
6620, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z0 == 0 goto $r7 = r3
6622, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
6624, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r7 = r3
6626, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= r5 = $r7]
6628, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r5 = $r7
6632, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6634, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
6636, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6638, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6640, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6644, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
6646, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6648, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | return
6652, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
6654, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
6657, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r0 := @this: org.apache.commons.csv.CSVParser
6659, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | z1 := @parameter0: boolean
6661, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
6663, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6665, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
6667, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6669, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
6671, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z0 == 0 goto $r7 = r3
6673, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
6675, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r7 = r3
6677, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | goto [?= r5 = $r7]
6679, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r5 = $r7
6683, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6685, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
6687, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6689, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6691, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6695, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
6697, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6699, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | return
6703, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
6705, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
6708, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r0 := @this: org.apache.commons.csv.CSVParser
6710, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | z1 := @parameter0: boolean
6712, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
6714, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6716, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
6718, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6720, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
6722, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z0 == 0 goto $r7 = r3
6724, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
6726, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r7 = r3
6728, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | goto [?= r5 = $r7]
6730, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r5 = $r7
6734, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6736, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
6738, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6740, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6742, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6746, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
6748, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6750, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | return
6754, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
6756, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
6759, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r0 := @this: org.apache.commons.csv.CSVParser
6761, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | z1 := @parameter0: boolean
6763, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
6765, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
6767, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
6769, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6771, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
6773, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z0 == 0 goto $r7 = r3
6775, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
6777, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r7 = r3
6779, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | goto [?= r5 = $r7]
6781, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r5 = $r7
6785, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6787, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
6789, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6791, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6793, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
6797, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
6799, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
6801, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | return
6805, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
6807, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
6811, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
6813, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
6815, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | return $l0
6817, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | z0 := @parameter0: boolean
6819, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6821, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
6823, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6825, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
6827, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6831, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6835, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $z2 = $r4 instanceof java.io.Closeable
6837, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | if $z2 == 0 goto return
6839, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6843, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | $r2 = (java.io.Closeable) $r1
6845, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | interfaceinvoke $r2.<java.io.Closeable: void close()>()
6848, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | r0 := @this: org.apache.commons.csv.CSVPrinter
6850, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | z0 := @parameter0: boolean
6852, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6854, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
6856, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6858, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
6860, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6864, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6868, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $z2 = $r4 instanceof java.io.Closeable
6870, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if $z2 == 0 goto return
6872, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6874, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | return
6876, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r2 = (java.io.Closeable) $r1
6878, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | interfaceinvoke $r2.<java.io.Closeable: void close()>()
6881, <org.apache.commons.csv.CSVPrinter: void flush()> | r0 := @this: org.apache.commons.csv.CSVPrinter
6883, <org.apache.commons.csv.CSVPrinter: void flush()> | z0 := @parameter0: boolean
6885, <org.apache.commons.csv.CSVPrinter: void flush()> | if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6887, <org.apache.commons.csv.CSVPrinter: void flush()> | $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
6889, <org.apache.commons.csv.CSVPrinter: void flush()> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
6891, <org.apache.commons.csv.CSVPrinter: void flush()> | $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
6893, <org.apache.commons.csv.CSVPrinter: void flush()> | if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6897, <org.apache.commons.csv.CSVPrinter: void flush()> | $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6901, <org.apache.commons.csv.CSVPrinter: void flush()> | $z2 = $r4 instanceof java.io.Closeable
6903, <org.apache.commons.csv.CSVPrinter: void flush()> | if $z2 == 0 goto return
6905, <org.apache.commons.csv.CSVPrinter: void flush()> | $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
6907, <org.apache.commons.csv.CSVPrinter: void flush()> | return
6909, <org.apache.commons.csv.CSVPrinter: void flush()> | $r2 = (java.io.Closeable) $r1
6911, <org.apache.commons.csv.CSVPrinter: void flush()> | interfaceinvoke $r2.<java.io.Closeable: void close()>()
6914, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
6915, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r1 := @parameter0: char[]
6917, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i1 := @parameter1: int
6919, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i0 := @parameter2: int
6921, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i0 != 0 goto i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0)
6923, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return 0
6925, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i2 = specialinvoke r0.<java.io.BufferedReader: int read(char[],int,int)>(r1, i1, i0)
6927, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i2 <= 0 goto (branch)
6929, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i14 = i1
6931, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i2 != -1 goto $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
6933, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i3 = i1 + i2
6935, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i14 >= $i3 goto $i4 = i1 + i2
6937, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | c7 = r1[i14]
6939, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i4 = i1 + i2
6941, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if c7 != 10 goto (branch)
6943, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i14 <= i1 goto $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
6945, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if c7 != 13 goto i14 = i14 + 1
6947, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i12 = i14 - 1
6949, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i15 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
6951, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i15 = r1[$i12]
6953, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= (branch)]
6955, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if 13 == $i15 goto i14 = i14 + 1
6959, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l10 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
6961, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i14 = i14 + 1
6963, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l11 = $l10 + 1L
6965, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l11
6967, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= i14 = i14 + 1]
6971, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l8 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
6975, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l9 = $l8 + 1L
6977, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter> = $l9
6981, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= $i3 = i1 + i2]
6985, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i5 = $i4 - 1
6987, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c6 = r1[$i5]
6989, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = $c6
6991, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>]
6993, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l16 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
6995, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar> = -1
7001, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l17 = (long) i2
7003, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $l18 = $l16 + $l17
7005, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<org.apache.commons.csv.ExtendedBufferedReader: long position> = $l18
7007, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return i2
7009, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i0 := @parameter0: int
7011, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7013, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c1 = $r1[0]
7015, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7017, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | return 0
7019, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7021, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $i2 = lengthof $r2
7023, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7025, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | return 1
7027, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7029, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7031, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
7033, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i8 = 0
7035, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7037, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $i3 = lengthof $r6
7039, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7041, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7043, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7045, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c7 = $r10[i8]
7047, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7049, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $i5 = i8 + 1
7051, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c6 = $r11[$i5]
7053, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $c7 == $c6 goto i8 = i8 + 1
7057, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i8 = i8 + 1
7059, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
7063, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7065, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7067, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $i4 = lengthof $r7
7069, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
7071, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if i9 == -1 goto $z0 = 0
7073, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z0 = 1
7075, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z0 = 0
7077, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= return $z0]
7079, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | return $z0
7082, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | r0 := @this: org.apache.commons.csv.Lexer
7084, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i0 := @parameter0: int
7086, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7088, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c1 = $r1[0]
7090, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7092, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return 0
7094, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7096, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i2 = lengthof $r2
7098, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7100, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return 1
7102, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7104, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7106, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
7108, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i8 = 0
7110, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7112, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i3 = lengthof $r6
7114, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7116, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7118, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7120, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c7 = $r10[i8]
7122, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7124, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i5 = i8 + 1
7126, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c6 = $r11[$i5]
7128, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if $c7 == $c6 goto i8 = i8 + 1
7132, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i8 = i8 + 1
7134, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
7138, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7140, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
7142, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i4 = lengthof $r7
7144, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
7146, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i9 == -1 goto $z0 = 0
7148, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $z0 = 1
7150, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $z0 = 0
7152, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | goto [?= return $z0]
7154, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return $z0
7157, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1 := @this: org.apache.commons.csv.Lexer
7158, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r0 := @parameter0: java.lang.StringBuilder
7160, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
7162, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if i3 <= 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
7164, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $i1 = i3 - 1
7166, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
7168, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c2 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>($i1)
7170, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2)
7172, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z0 == 0 goto $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>()
7174, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i3 = i3 - 1
7182, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if i3 == $i0 goto return
7184, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i3)
7186, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | return
7190, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r4 := @parameter0: java.lang.String
7194, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
7196, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7198, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
7200, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
7202, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
7204, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z2 == 0 goto (branch)
7206, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z1 == 0 goto $r5 = null
7208, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z1 == 0 goto $r6 = r4
7210, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z0 == 0 goto $r5 = null
7212, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r5 = null
7214, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r5 = r4
7218, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | goto [?= return $r5]
7220, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | return $r5
7224, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if r3 != null goto $r6 = r4
7226, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r6 = r4
7228, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
7232, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z3 == 0 goto $r6 = r4
7234, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z0 != 0 goto $r6 = r4
7238, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r6 = null
7242, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | goto [?= return $r6]
7244, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | return $r6
7247, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r0 := @this: org.apache.commons.csv.CSVParser
7249, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r4 := @parameter0: java.lang.String
7251, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
7253, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
7255, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7257, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
7259, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
7261, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
7263, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if $z2 == 0 goto (branch)
7265, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z1 == 0 goto $r5 = null
7267, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z1 == 0 goto $r6 = r4
7269, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z0 == 0 goto $r5 = null
7271, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r5 = null
7273, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r5 = r4
7277, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | goto [?= return $r5]
7279, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | return $r5
7283, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if r3 != null goto $r6 = r4
7285, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r6 = r4
7287, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
7291, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if $z3 == 0 goto $r6 = r4
7293, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z0 != 0 goto $r6 = r4
7297, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r6 = null
7301, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | goto [?= return $r6]
7303, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | return $r6
7306, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r0 := @this: org.apache.commons.csv.CSVParser
7308, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r4 := @parameter0: java.lang.String
7310, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
7312, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
7314, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7316, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
7318, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
7320, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
7322, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $z2 == 0 goto (branch)
7324, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z1 == 0 goto $r5 = null
7326, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z1 == 0 goto $r6 = r4
7328, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z0 == 0 goto $r5 = null
7330, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r5 = null
7332, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r5 = r4
7336, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | goto [?= return $r5]
7338, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | return $r5
7342, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if r3 != null goto $r6 = r4
7344, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r6 = r4
7346, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
7350, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $z3 == 0 goto $r6 = r4
7352, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z0 != 0 goto $r6 = r4
7356, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r6 = null
7360, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | goto [?= return $r6]
7362, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | return $r6
7366, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7368, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
7370, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
7372, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $r2 == $r3 goto $z0 = 1
7374, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7376, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z0 = 1
7378, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
7380, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
7382, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $r5 != $r6 goto $z0 = 0
7386, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z0 = 0
7388, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | goto [?= return $z0]
7390, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | return $z0
7393, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | r0 := @this: org.apache.commons.csv.CSVParser
7395, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7397, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
7399, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
7401, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | if $r2 == $r3 goto $z0 = 1
7403, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
7405, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $z0 = 1
7407, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
7409, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
7411, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | if $r5 != $r6 goto $z0 = 0
7415, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $z0 = 0
7417, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | goto [?= return $z0]
7419, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | return $z0
7422, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.Lexer
7423, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7425, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
7427, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | return $l0
7428, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.Lexer
7430, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7432, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
7434, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | return $l0
7435, <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> | $r0 = <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] $VALUES>
7436, <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> | $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
7438, <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> | $r2 = (com.sun.nio.file.ExtendedOpenOption[]) $r1
7440, <com.sun.nio.file.ExtendedOpenOption: com.sun.nio.file.ExtendedOpenOption[] values()> | return $r2
7444, <org.apache.commons.csv.CSVPrinter: void flush()> | $z0 = $r1 instanceof java.io.Flushable
7446, <org.apache.commons.csv.CSVPrinter: void flush()> | if $z0 == 0 goto return
7448, <org.apache.commons.csv.CSVPrinter: void flush()> | $r2 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
7452, <org.apache.commons.csv.CSVPrinter: void flush()> | $r3 = (java.io.Flushable) $r2
7454, <org.apache.commons.csv.CSVPrinter: void flush()> | interfaceinvoke $r3.<java.io.Flushable: void flush()>()
7457, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | r1 := @this: org.apache.commons.csv.ExtendedBufferedReader
7458, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | r0 := @parameter0: char[]
7460, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i0 = lengthof r0
7462, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | specialinvoke r1.<java.io.BufferedReader: void mark(int)>(i0)
7464, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | specialinvoke r1.<java.io.BufferedReader: int read(char[],int,int)>(r0, 0, i0)
7466, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | specialinvoke r1.<java.io.BufferedReader: void reset()>()
7468, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return r0
7469, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0 := @this: org.apache.commons.csv.Lexer
7470, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7472, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r1 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7474, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r1)
7476, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r4 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7478, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c1 = $r4[0]
7480, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r5 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7482, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c0 = $r5[0]
7484, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $c1 == $c0 goto i11 = 1
7486, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | return 0
7488, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i11 = 1
7490, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7492, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i2 = lengthof $r6
7494, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if i11 >= $i2 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7496, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7498, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7500, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i4 = 2 * i11
7502, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c6 = $r10[$i4]
7504, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
7506, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c5 = $r11[i11]
7508, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $c6 != $c5 goto return 0
7510, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r12 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7514, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i7 = 2 * i11
7516, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i8 = $i7 - 1
7518, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c10 = $r12[$i8]
7520, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c9 = r0.<org.apache.commons.csv.Lexer: char escape>
7522, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $c10 == $c9 goto i11 = i11 + 1
7526, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i11 = i11 + 1
7528, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>]
7532, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r8 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7534, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r7 = r0.<org.apache.commons.csv.Lexer: char[] escapeDelimiterBuf>
7536, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i3 = lengthof $r7
7538, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i12 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i3)
7540, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if i12 == -1 goto $z0 = 0
7542, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z0 = 1
7544, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z0 = 0
7546, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= return $z0]
7548, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | return $z0
7551, <org.apache.commons.csv.Lexer: int readEscape()> | r0 := @this: org.apache.commons.csv.Lexer
7552, <org.apache.commons.csv.Lexer: int readEscape()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7554, <org.apache.commons.csv.Lexer: int readEscape()> | i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
7556, <org.apache.commons.csv.Lexer: int readEscape()> | lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
7558, <org.apache.commons.csv.Lexer: int readEscape()> | $r2 = new java.io.IOException
7560, <org.apache.commons.csv.Lexer: int readEscape()> | return i0
7562, <org.apache.commons.csv.Lexer: int readEscape()> | return 8
7564, <org.apache.commons.csv.Lexer: int readEscape()> | return 12
7566, <org.apache.commons.csv.Lexer: int readEscape()> | return 10
7568, <org.apache.commons.csv.Lexer: int readEscape()> | return 13
7570, <org.apache.commons.csv.Lexer: int readEscape()> | return 9
7572, <org.apache.commons.csv.Lexer: int readEscape()> | $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
7574, <org.apache.commons.csv.Lexer: int readEscape()> | specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
7576, <org.apache.commons.csv.Lexer: int readEscape()> | throw $r2
7578, <org.apache.commons.csv.Lexer: int readEscape()> | if $z0 == 0 goto return -1
7582, <org.apache.commons.csv.Lexer: int readEscape()> | return -1
7583, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | r0 := @this: org.apache.commons.csv.Lexer
7585, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
7587, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
7589, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
7591, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $r2 = new java.io.IOException
7593, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return i0
7595, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 8
7597, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 12
7599, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 10
7601, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 13
7603, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 9
7605, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
7607, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
7609, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | throw $r2
7611, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | if $z0 == 0 goto return -1
7615, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return -1
7686, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | r0 := @this: org.apache.commons.csv.CSVFormat
7687, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreHeaderCase>
7689, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | return $z0
7690, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | r0 := @this: org.apache.commons.csv.CSVFormat
7691, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreSurroundingSpaces>
7693, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | return $z0
7694, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | r0 := @this: org.apache.commons.csv.CSVFormat
7695, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean ignoreEmptyLines>
7697, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | return $z0
7698, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | r0 := @this: org.apache.commons.csv.CSVFormat
7699, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
7701, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r1 == null goto $z0 = 0
7703, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z0 = 1
7705, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z0 = 0
7707, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | goto [?= return $z0]
7709, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | return $z0
7712, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | r0 := @this: org.apache.commons.csv.CSVFormat
7713, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
7715, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r1 == null goto $z0 = 0
7717, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z0 = 1
7719, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z0 = 0
7721, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | goto [?= return $z0]
7723, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | return $z0
7726, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | r0 := @this: org.apache.commons.csv.CSVFormat
7727, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
7729, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r1 == null goto $z0 = 0
7731, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z0 = 1
7733, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z0 = 0
7735, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | goto [?= return $z0]
7737, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | return $z0
7740, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | r0 := @this: org.apache.commons.csv.CSVFormat
7741, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
7743, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r1 == null goto $z0 = 0
7745, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z0 = 1
7747, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z0 = 0
7749, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | goto [?= return $z0]
7751, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | return $z0
8280, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
8281, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | $z0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: boolean closed>
8401, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i0 := @parameter0: int
8403, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if i0 != -1 goto $z0 = 0
8405, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z0 = 1
8407, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z0 = 0
8409, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= return $z0]
8411, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | return $z0
8597, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i0 := @parameter0: int
8599, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $c1 = r0.<org.apache.commons.csv.Lexer: char quoteChar>
8601, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if i0 != $c1 goto $z0 = 0
8603, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z0 = 1
8605, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z0 = 0
8607, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | goto [?= return $z0]
8609, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | return $z0
8753, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i0 := @parameter0: int
8755, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $c1 = r0.<org.apache.commons.csv.Lexer: char commentStart>
8757, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if i0 != $c1 goto $z0 = 0
8759, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z0 = 1
8761, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z0 = 0
8763, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | goto [?= return $z0]
8765, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | return $z0
8769, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i0 := @parameter0: int
8771, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if i0 == 10 goto $z0 = 1
8773, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if i0 == 13 goto $z0 = 1
8775, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z0 = 1
8777, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if i0 != -2 goto $z0 = 0
8783, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z0 = 0
8785, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | goto [?= return $z0]
8787, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | return $z0
8790, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
8791, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
8793, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | return $i0
8840, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
8841, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | $l0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long position>
8964, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0 := @this: org.apache.commons.csv.Lexer
8965, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i0 := @parameter0: int
8967, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c1 = r0.<org.apache.commons.csv.Lexer: char escape>
8969, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if i0 != $c1 goto $z0 = 0
8971, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z0 = 1
8973, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z0 = 0
8975, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= return $z0]
8977, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | return $z0
9070, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r0 := @this: org.apache.commons.csv.CSVFormat
9071, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trailingDelimiter>
9073, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | return $z0
9074, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r0 := @this: org.apache.commons.csv.CSVFormat
9075, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean trim>
9077, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | return $z0
9078, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | r0 := @this: org.apache.commons.csv.CSVFormat
9079, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $z0 = r0.<org.apache.commons.csv.CSVFormat: boolean autoFlush>
9081, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | return $z0
9110, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r0 := @this: org.apache.commons.csv.CSVFormat
9111, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
9113, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | return $r1
9142, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | r0 := @this: org.apache.commons.csv.CSVFormat
9143, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
9145, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | return $r1
9146, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
9147, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $i0 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
9149, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | if $i0 == 13 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9151, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $i1 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
9153, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9155, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | if $i1 == 10 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9157, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $i2 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
9161, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | if $i2 == -2 goto $l6 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9163, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $i3 = r0.<org.apache.commons.csv.ExtendedBufferedReader: int lastChar>
9167, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | if $i3 != -1 goto $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9171, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $l4 = r0.<org.apache.commons.csv.ExtendedBufferedReader: long eolCounter>
9173, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | return $l6
9175, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $l5 = $l4 + 1L
9177, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | return $l5
9179, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | i0 := @parameter0: int
9181, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $c1 = r0.<org.apache.commons.csv.Lexer: char escape>
9183, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | if i0 == $c1 goto $z0 = 1
9185, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $c2 = r0.<org.apache.commons.csv.Lexer: char quoteChar>
9187, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $z0 = 1
9189, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | if i0 == $c2 goto $z0 = 1
9191, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $c3 = r0.<org.apache.commons.csv.Lexer: char commentStart>
9195, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | if i0 != $c3 goto $z0 = 0
9199, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $z0 = 0
9201, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | goto [?= return $z0]
9203, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return $z0
