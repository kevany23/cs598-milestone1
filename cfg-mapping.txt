CFG statement, key number
0, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $r0 = <jdk.internal.misc.TerminatingThreadLocal: java.lang.ThreadLocal REGISTRY>
2, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>()
4, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $r2 = (java.util.Collection) $r1
6, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>()
8, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
10, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | if $z0 == 0 goto return
12, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
14, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | return
16, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | r5 = (jdk.internal.misc.TerminatingThreadLocal) $r4
18, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | specialinvoke r5.<jdk.internal.misc.TerminatingThreadLocal: void _threadTerminated()>()
20, <org.apache.commons.csv.CSVParser$CSVRecordIterator: java.lang.Object next()> | goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
23, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r0 = <jdk.internal.misc.TerminatingThreadLocal: java.lang.ThreadLocal REGISTRY>
25, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>()
27, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r2 = (java.util.Collection) $r1
29, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>()
31, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
33, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | if $z0 == 0 goto return
35, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
37, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | return
39, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | r5 = (jdk.internal.misc.TerminatingThreadLocal) $r4
41, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | specialinvoke r5.<jdk.internal.misc.TerminatingThreadLocal: void _threadTerminated()>()
43, <org.apache.commons.csv.CSVParser$CSVRecordIterator: boolean hasNext()> | goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
46, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r1 := @this: java.util.concurrent.ConcurrentHashMap
48, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r0 := @parameter0: java.lang.Object
50, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
52, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | i1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i0)
54, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r2 = r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>
56, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r3 = $r2
58, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r2 == null goto return null
60, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i2 = lengthof r3
62, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return null
64, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | i3 = $i2
66, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $i2 <= 0 goto return null
68, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i4 = i3 - 1
72, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i5 = $i4 & i1
74, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r3, $i5)
76, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r11 = $r4
78, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r4 == null goto return null
80, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>
84, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | i7 = $i6
86, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $i6 != i1 goto (branch)
88, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r9 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>
90, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if i7 >= 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
92, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r12 = $r9
94, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r9 == r0 goto $r10 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
96, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if r12 == null goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
98, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r10 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
100, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r12)
102, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
104, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z1 == 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
110, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return $r10
112, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r7 = virtualinvoke r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>(i1, r0)
116, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r8 = $r7
118, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r7 == null goto $r13 = null
120, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r13 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
122, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r13 = null
124, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | goto [?= return $r13]
126, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return $r13
130, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r11 = $r14
132, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r14 == null goto return null
134, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $i8 = r11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>
138, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $i8 != i1 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
140, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r5 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>
144, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | r15 = $r5
146, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $r5 == r0 goto $r6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
148, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if r15 == null goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
150, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $r6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
152, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r15)
156, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | if $z0 == 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
162, <org.apache.commons.csv.CSVFormat: boolean equals(java.lang.Object)> | return $r6
163, <org.apache.commons.csv.CSVFormat: int hashCode()> | r1 := @this: java.util.concurrent.ConcurrentHashMap
165, <org.apache.commons.csv.CSVFormat: int hashCode()> | r0 := @parameter0: java.lang.Object
167, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
169, <org.apache.commons.csv.CSVFormat: int hashCode()> | i1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i0)
171, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r2 = r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>
173, <org.apache.commons.csv.CSVFormat: int hashCode()> | r3 = $r2
175, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r2 == null goto return null
177, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i2 = lengthof r3
179, <org.apache.commons.csv.CSVFormat: int hashCode()> | return null
181, <org.apache.commons.csv.CSVFormat: int hashCode()> | i3 = $i2
183, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $i2 <= 0 goto return null
185, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i4 = i3 - 1
189, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i5 = $i4 & i1
191, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r3, $i5)
193, <org.apache.commons.csv.CSVFormat: int hashCode()> | r11 = $r4
195, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r4 == null goto return null
197, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>
201, <org.apache.commons.csv.CSVFormat: int hashCode()> | i7 = $i6
203, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $i6 != i1 goto (branch)
205, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r9 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>
207, <org.apache.commons.csv.CSVFormat: int hashCode()> | if i7 >= 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
209, <org.apache.commons.csv.CSVFormat: int hashCode()> | r12 = $r9
211, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r9 == r0 goto $r10 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
213, <org.apache.commons.csv.CSVFormat: int hashCode()> | if r12 == null goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
215, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r10 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
217, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r12)
219, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
221, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $z1 == 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
227, <org.apache.commons.csv.CSVFormat: int hashCode()> | return $r10
229, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r7 = virtualinvoke r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>(i1, r0)
233, <org.apache.commons.csv.CSVFormat: int hashCode()> | r8 = $r7
235, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r7 == null goto $r13 = null
237, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r13 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
239, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r13 = null
241, <org.apache.commons.csv.CSVFormat: int hashCode()> | goto [?= return $r13]
243, <org.apache.commons.csv.CSVFormat: int hashCode()> | return $r13
247, <org.apache.commons.csv.CSVFormat: int hashCode()> | r11 = $r14
249, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r14 == null goto return null
251, <org.apache.commons.csv.CSVFormat: int hashCode()> | $i8 = r11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>
255, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $i8 != i1 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
257, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r5 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>
261, <org.apache.commons.csv.CSVFormat: int hashCode()> | r15 = $r5
263, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $r5 == r0 goto $r6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
265, <org.apache.commons.csv.CSVFormat: int hashCode()> | if r15 == null goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
267, <org.apache.commons.csv.CSVFormat: int hashCode()> | $r6 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>
269, <org.apache.commons.csv.CSVFormat: int hashCode()> | $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r15)
273, <org.apache.commons.csv.CSVFormat: int hashCode()> | if $z0 == 0 goto $r14 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>
279, <org.apache.commons.csv.CSVFormat: int hashCode()> | return $r6
280, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | r0 := @this: java.io.BufferedReader$1
281, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r5 := @caughtexception
283, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r1 = r0.<java.io.BufferedReader$1: java.lang.String nextLine>
285, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if $r1 == null goto $r2 = r0.<java.io.BufferedReader$1: java.io.BufferedReader this$0>
287, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | return 1
289, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r2 = r0.<java.io.BufferedReader$1: java.io.BufferedReader this$0>
291, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r3 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>()
293, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | r0.<java.io.BufferedReader$1: java.lang.String nextLine> = $r3
295, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r4 = r0.<java.io.BufferedReader$1: java.lang.String nextLine>
297, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | if $r4 == null goto $z0 = 0
299, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $z0 = 1
301, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $z0 = 0
303, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | goto [?= return $z0]
305, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | return $z0
309, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | r6 = $r5
311, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | $r7 = new java.io.UncheckedIOException
313, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | specialinvoke $r7.<java.io.UncheckedIOException: void <init>(java.io.IOException)>(r6)
315, <org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()> | throw $r7
316, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
318, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
320, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if $i0 != -1 goto $r1 = new java.lang.StringBuilder
322, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | return null
324, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $r1 = new java.lang.StringBuilder
326, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
328, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | r2 = $r1
330, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
332, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 != 13 goto (branch)
334, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
336, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
338, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i3 != 10 goto (branch)
340, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
346, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
348, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
350, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | if i1 != 13 goto $c2 = (char) i1
354, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
356, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | $c2 = (char) i1
360, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
362, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
366, <org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()> | return $r4
367, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r0 := @this: org.apache.commons.csv.ExtendedBufferedReader
369, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $i0 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
371, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if $i0 != -1 goto $r1 = new java.lang.StringBuilder
373, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | return null
375, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $r1 = new java.lang.StringBuilder
377, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
379, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | r2 = $r1
381, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
383, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 != 13 goto (branch)
385, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | i3 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int lookAhead()>()
387, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 == -1 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
389, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i3 != 10 goto (branch)
391, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
397, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 == 10 goto $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
399, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
401, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | if i1 != 13 goto $c2 = (char) i1
405, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | goto [?= $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()]
407, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | $c2 = (char) i1
411, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
413, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | goto [?= i1 = virtualinvoke r0.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()]
417, <org.apache.commons.csv.ExtendedBufferedReader: int read()> | return $r4
418, <org.apache.commons.csv.Lexer: boolean isClosed()> | r0 := @this: org.apache.commons.csv.CSVParser
420, <org.apache.commons.csv.Lexer: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
422, <org.apache.commons.csv.Lexer: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: boolean isClosed()>()
424, <org.apache.commons.csv.Lexer: boolean isClosed()> | return $z0
425, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.CSVParser
427, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r38 = null
429, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
431, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | interfaceinvoke $r1.<java.util.List: void clear()>()
433, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r39 = null
435, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
437, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
439, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
441, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | l2 = $l0 + $l1
443, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
445, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
447, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
449, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
451, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
453, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
455, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
457, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
459, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
461, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $i4 = $r9[$i3]
463, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
465, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
467, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
469, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
471, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r24 = new java.io.IOException
473, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
475, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r31 = new java.lang.IllegalStateException
477, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
479, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
485, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
487, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
497, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r25 = new java.lang.StringBuilder
499, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
501, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
503, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
505, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
507, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
509, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
511, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
513, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | throw $r24
515, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r23 = new java.lang.StringBuilder
517, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
519, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
521, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r39 = $r23
523, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
525, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
529, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
531, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
533, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
535, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
537, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
543, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r32 = new java.lang.StringBuilder
545, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
547, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
549, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
551, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
553, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
555, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
557, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
559, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | throw $r31
561, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
563, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
565, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
567, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
571, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
573, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if $z0 != 0 goto return r38
575, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
577, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | return r38
579, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l6 = $l5 + 1L
581, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
583, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
585, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r43 = null
587, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
589, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | goto [?= r17 = $r43]
591, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r17 = $r43
595, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r18 = new org.apache.commons.csv.CSVRecord
597, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
599, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
601, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
603, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $r22 = (java.lang.String[]) $r21
605, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
607, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
609, <org.apache.commons.csv.CSVParser: long getCurrentLineNumber()> | r38 = $r18
612, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r0 := @this: org.apache.commons.csv.CSVParser
614, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r38 = null
616, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
618, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | interfaceinvoke $r1.<java.util.List: void clear()>()
620, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r39 = null
622, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
624, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
626, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
628, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | l2 = $l0 + $l1
630, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
632, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
634, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
636, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
638, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
640, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
642, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
644, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
646, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
648, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $i4 = $r9[$i3]
650, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
652, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
654, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
656, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
658, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r24 = new java.io.IOException
660, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
662, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r31 = new java.lang.IllegalStateException
664, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
666, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
672, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
674, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
684, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r25 = new java.lang.StringBuilder
686, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
688, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
690, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
692, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
694, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
696, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
698, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
700, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | throw $r24
702, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r23 = new java.lang.StringBuilder
704, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
706, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
708, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r39 = $r23
710, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
712, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
716, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
718, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
720, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
722, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
724, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
730, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r32 = new java.lang.StringBuilder
732, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
734, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
736, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
738, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
740, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
742, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
744, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
746, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | throw $r31
748, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
750, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
752, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
754, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
758, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
760, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if $z0 != 0 goto return r38
762, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
764, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | return r38
766, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l6 = $l5 + 1L
768, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
770, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
772, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r43 = null
774, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
776, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | goto [?= r17 = $r43]
778, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r17 = $r43
782, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r18 = new org.apache.commons.csv.CSVRecord
784, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
786, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
788, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
790, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $r22 = (java.lang.String[]) $r21
792, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
794, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
796, <org.apache.commons.csv.CSVParser: void addRecordValue(boolean)> | r38 = $r18
799, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r0 := @this: org.apache.commons.csv.CSVParser
801, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r38 = null
803, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
805, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | interfaceinvoke $r1.<java.util.List: void clear()>()
807, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r39 = null
809, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
811, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
813, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
815, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | l2 = $l0 + $l1
817, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
819, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
821, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
823, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
825, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
827, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
829, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
831, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
833, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
835, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $i4 = $r9[$i3]
837, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
839, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
841, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
843, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
845, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r24 = new java.io.IOException
847, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
849, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r31 = new java.lang.IllegalStateException
851, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
853, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
859, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
861, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
871, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r25 = new java.lang.StringBuilder
873, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
875, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
877, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
879, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
881, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
883, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
885, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
887, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | throw $r24
889, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r23 = new java.lang.StringBuilder
891, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
893, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
895, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r39 = $r23
897, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
899, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
903, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
905, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
907, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
909, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
911, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
917, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r32 = new java.lang.StringBuilder
919, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
921, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
923, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
925, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
927, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
929, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
931, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
933, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | throw $r31
935, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
937, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
939, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
941, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
945, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
947, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if $z0 != 0 goto return r38
949, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
951, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | return r38
953, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l6 = $l5 + 1L
955, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
957, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
959, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r43 = null
961, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
963, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | goto [?= r17 = $r43]
965, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r17 = $r43
969, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r18 = new org.apache.commons.csv.CSVRecord
971, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
973, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
975, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
977, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $r22 = (java.lang.String[]) $r21
979, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
981, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
983, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)> | r38 = $r18
986, <org.apache.commons.csv.Token: void reset()> | r0 := @this: org.apache.commons.csv.CSVParser
988, <org.apache.commons.csv.Token: void reset()> | r38 = null
990, <org.apache.commons.csv.Token: void reset()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
992, <org.apache.commons.csv.Token: void reset()> | interfaceinvoke $r1.<java.util.List: void clear()>()
994, <org.apache.commons.csv.Token: void reset()> | r39 = null
996, <org.apache.commons.csv.Token: void reset()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
998, <org.apache.commons.csv.Token: void reset()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
1000, <org.apache.commons.csv.Token: void reset()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
1002, <org.apache.commons.csv.Token: void reset()> | l2 = $l0 + $l1
1004, <org.apache.commons.csv.Token: void reset()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1006, <org.apache.commons.csv.Token: void reset()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
1008, <org.apache.commons.csv.Token: void reset()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
1010, <org.apache.commons.csv.Token: void reset()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1012, <org.apache.commons.csv.Token: void reset()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
1014, <org.apache.commons.csv.Token: void reset()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
1016, <org.apache.commons.csv.Token: void reset()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1018, <org.apache.commons.csv.Token: void reset()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1020, <org.apache.commons.csv.Token: void reset()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
1022, <org.apache.commons.csv.Token: void reset()> | $i4 = $r9[$i3]
1024, <org.apache.commons.csv.Token: void reset()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
1026, <org.apache.commons.csv.Token: void reset()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
1028, <org.apache.commons.csv.Token: void reset()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
1030, <org.apache.commons.csv.Token: void reset()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1032, <org.apache.commons.csv.Token: void reset()> | $r24 = new java.io.IOException
1034, <org.apache.commons.csv.Token: void reset()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
1036, <org.apache.commons.csv.Token: void reset()> | $r31 = new java.lang.IllegalStateException
1038, <org.apache.commons.csv.Token: void reset()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
1040, <org.apache.commons.csv.Token: void reset()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1046, <org.apache.commons.csv.Token: void reset()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
1048, <org.apache.commons.csv.Token: void reset()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1058, <org.apache.commons.csv.Token: void reset()> | $r25 = new java.lang.StringBuilder
1060, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
1062, <org.apache.commons.csv.Token: void reset()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
1064, <org.apache.commons.csv.Token: void reset()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
1066, <org.apache.commons.csv.Token: void reset()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
1068, <org.apache.commons.csv.Token: void reset()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
1070, <org.apache.commons.csv.Token: void reset()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
1072, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
1074, <org.apache.commons.csv.Token: void reset()> | throw $r24
1076, <org.apache.commons.csv.Token: void reset()> | $r23 = new java.lang.StringBuilder
1078, <org.apache.commons.csv.Token: void reset()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
1080, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
1082, <org.apache.commons.csv.Token: void reset()> | r39 = $r23
1084, <org.apache.commons.csv.Token: void reset()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
1086, <org.apache.commons.csv.Token: void reset()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1090, <org.apache.commons.csv.Token: void reset()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
1092, <org.apache.commons.csv.Token: void reset()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
1094, <org.apache.commons.csv.Token: void reset()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1096, <org.apache.commons.csv.Token: void reset()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
1098, <org.apache.commons.csv.Token: void reset()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
1104, <org.apache.commons.csv.Token: void reset()> | $r32 = new java.lang.StringBuilder
1106, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
1108, <org.apache.commons.csv.Token: void reset()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
1110, <org.apache.commons.csv.Token: void reset()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1112, <org.apache.commons.csv.Token: void reset()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1114, <org.apache.commons.csv.Token: void reset()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
1116, <org.apache.commons.csv.Token: void reset()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
1118, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
1120, <org.apache.commons.csv.Token: void reset()> | throw $r31
1122, <org.apache.commons.csv.Token: void reset()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1124, <org.apache.commons.csv.Token: void reset()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
1126, <org.apache.commons.csv.Token: void reset()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1128, <org.apache.commons.csv.Token: void reset()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
1132, <org.apache.commons.csv.Token: void reset()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
1134, <org.apache.commons.csv.Token: void reset()> | if $z0 != 0 goto return r38
1136, <org.apache.commons.csv.Token: void reset()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
1138, <org.apache.commons.csv.Token: void reset()> | return r38
1140, <org.apache.commons.csv.Token: void reset()> | $l6 = $l5 + 1L
1142, <org.apache.commons.csv.Token: void reset()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
1144, <org.apache.commons.csv.Token: void reset()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
1146, <org.apache.commons.csv.Token: void reset()> | $r43 = null
1148, <org.apache.commons.csv.Token: void reset()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
1150, <org.apache.commons.csv.Token: void reset()> | goto [?= r17 = $r43]
1152, <org.apache.commons.csv.Token: void reset()> | r17 = $r43
1156, <org.apache.commons.csv.Token: void reset()> | $r18 = new org.apache.commons.csv.CSVRecord
1158, <org.apache.commons.csv.Token: void reset()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
1160, <org.apache.commons.csv.Token: void reset()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
1162, <org.apache.commons.csv.Token: void reset()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
1164, <org.apache.commons.csv.Token: void reset()> | $r22 = (java.lang.String[]) $r21
1166, <org.apache.commons.csv.Token: void reset()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
1168, <org.apache.commons.csv.Token: void reset()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
1170, <org.apache.commons.csv.Token: void reset()> | r38 = $r18
1173, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r0 := @this: org.apache.commons.csv.CSVParser
1175, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r38 = null
1177, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r1 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
1179, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | interfaceinvoke $r1.<java.util.List: void clear()>()
1181, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r39 = null
1183, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
1185, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l0 = virtualinvoke $r2.<org.apache.commons.csv.Lexer: long getCharacterPosition()>()
1187, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l1 = r0.<org.apache.commons.csv.CSVParser: long characterOffset>
1189, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | l2 = $l0 + $l1
1191, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1193, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke $r3.<org.apache.commons.csv.Token: void reset()>()
1195, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r5 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
1197, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1199, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke $r5.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token)>($r4)
1201, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r9 = <org.apache.commons.csv.CSVParser$1: int[] $SwitchMap$org$apache$commons$csv$Token$Type>
1203, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r7 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1205, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r8 = $r7.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1207, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $i3 = virtualinvoke $r8.<org.apache.commons.csv.Token$Type: int ordinal()>()
1209, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $i4 = $r9[$i3]
1211, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | tableswitch($i4) {     case 1: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0);     case 2: goto specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1);     case 3: goto $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>;     case 4: goto $r24 = new java.io.IOException;     case 5: goto if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);     default: goto $r31 = new java.lang.IllegalStateException; }
1213, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(0)
1215, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke r0.<org.apache.commons.csv.CSVParser: void addRecordValue(boolean)>(1)
1217, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r30 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1219, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r24 = new java.io.IOException
1221, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if r39 != null goto virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
1223, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r31 = new java.lang.IllegalStateException
1225, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
1227, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1233, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $z1 = $r30.<org.apache.commons.csv.Token: boolean isReady>
1235, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $z1 == 0 goto $r40 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1245, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r25 = new java.lang.StringBuilder
1247, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
1249, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(line ")
1251, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l8 = virtualinvoke r0.<org.apache.commons.csv.CSVParser: long getCurrentLineNumber()>()
1253, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8)
1255, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") invalid parse sequence")
1257, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
1259, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String)>($r29)
1261, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | throw $r24
1263, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r23 = new java.lang.StringBuilder
1265, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10)
1267, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
1269, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r39 = $r23
1271, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>]
1273, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r11 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1277, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r12 = $r11.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
1279, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12)
1281, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r15 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1283, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r14 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
1285, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r15.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r14
1291, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r32 = new java.lang.StringBuilder
1293, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
1295, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected Token type: ")
1297, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r34 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1299, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r35 = $r34.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1301, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
1303, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
1305, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r37)
1307, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | throw $r31
1309, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r41 = $r40.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
1311, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r42 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
1313, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $r41 == $r42 goto $r3 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
1315, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r16 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
1319, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $z0 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>()
1321, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if $z0 != 0 goto return r38
1323, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l5 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
1325, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | return r38
1327, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l6 = $l5 + 1L
1329, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r0.<org.apache.commons.csv.CSVParser: long recordNumber> = $l6
1331, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | if r39 != null goto $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
1333, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r43 = null
1335, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r43 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>()
1337, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | goto [?= r17 = $r43]
1339, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r17 = $r43
1343, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r18 = new org.apache.commons.csv.CSVRecord
1345, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r20 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
1347, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r19 = <org.apache.commons.csv.Constants: java.lang.String[] EMPTY_STRING_ARRAY>
1349, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19)
1351, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $r22 = (java.lang.String[]) $r21
1353, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | $l7 = r0.<org.apache.commons.csv.CSVParser: long recordNumber>
1355, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | specialinvoke $r18.<org.apache.commons.csv.CSVRecord: void <init>(org.apache.commons.csv.CSVParser,java.lang.String[],java.lang.String,long,long)>(r0, $r22, r17, $l7, l2)
1357, <org.apache.commons.csv.Lexer: long getCharacterPosition()> | r38 = $r18
1360, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r5 := @this: java.util.ServiceLoader
1361, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r13 := @caughtexception
1362, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r12 := @caughtexception
1363, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r11 := @caughtexception
1364, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r10 := @caughtexception
1365, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r7 := @caughtexception
1367, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r6 := @parameter0: java.lang.Class
1369, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r2 := @parameter1: java.net.URL
1371, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r14 = null
1373, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r15 = null
1375, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r0 = new java.util.ArrayList
1377, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | specialinvoke $r0.<java.util.ArrayList: void <init>()>()
1379, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r1 = $r0
1381, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r14 = virtualinvoke r2.<java.net.URL: java.io.InputStream openStream()>()
1383, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r3 = new java.io.BufferedReader
1385, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r4 = new java.io.InputStreamReader
1387, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r14, "utf-8")
1389, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4)
1391, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r15 = $r3
1393, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | i1 = 1
1395, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $i0 = specialinvoke r5.<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>(r6, r2, r15, i1, r1)
1397, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | i1 = $i0
1399, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | if $i0 < 0 goto (branch)
1401, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | goto [?= $i0 = specialinvoke r5.<java.util.ServiceLoader: int parseLine(java.lang.Class,java.net.URL,java.io.BufferedReader,int,java.util.List)>(r6, r2, r15, i1, r1)]
1403, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | if r15 == null goto (branch)
1407, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | virtualinvoke r15.<java.io.BufferedReader: void close()>()
1409, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | if r14 == null goto (branch)
1413, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | virtualinvoke r14.<java.io.InputStream: void close()>()
1415, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | goto [?= $r19 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()]
1419, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | $r19 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()
1421, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r16 = $r13
1423, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | staticinvoke <java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>(r6, "Error closing configuration file", r16)
1429, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r17 = $r12
1431, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | staticinvoke <java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>(r6, "Error reading configuration file", r17)
1449, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r18 = $r11
1451, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | staticinvoke <java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>(r6, "Error closing configuration file", r18)
1457, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r9 = $r10
1469, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | goto [?= throw r9]
1473, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | throw r9
1475, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | r8 = $r7
1477, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | staticinvoke <java.util.ServiceLoader: void fail(java.lang.Class,java.lang.String,java.lang.Throwable)>(r6, "Error closing configuration file", r8)
1481, <org.apache.commons.csv.ExtendedBufferedReader: void close()> | return $r19
1482, <org.apache.commons.csv.Token: java.lang.String toString()> | r1 := @this: java.text.AttributeEntry
1484, <org.apache.commons.csv.Token: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
1486, <org.apache.commons.csv.Token: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1488, <org.apache.commons.csv.Token: java.lang.String toString()> | $r2 = r1.<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute key>
1490, <org.apache.commons.csv.Token: java.lang.String toString()> | $r3 = virtualinvoke $r2.<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>()
1492, <org.apache.commons.csv.Token: java.lang.String toString()> | $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
1494, <org.apache.commons.csv.Token: java.lang.String toString()> | $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
1496, <org.apache.commons.csv.Token: java.lang.String toString()> | $r6 = r1.<java.text.AttributeEntry: java.lang.Object value>
1498, <org.apache.commons.csv.Token: java.lang.String toString()> | $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>()
1500, <org.apache.commons.csv.Token: java.lang.String toString()> | $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
1502, <org.apache.commons.csv.Token: java.lang.String toString()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
1504, <org.apache.commons.csv.Token: java.lang.String toString()> | return $r9
1505, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | r1 := @this: java.text.AttributeEntry
1507, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
1509, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1511, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r2 = r1.<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute key>
1513, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r3 = virtualinvoke $r2.<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>()
1515, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
1517, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
1519, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r6 = r1.<java.text.AttributeEntry: java.lang.Object value>
1521, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>()
1523, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
1525, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
1527, <org.apache.commons.csv.CSVRecord: java.lang.String toString()> | return $r9
1528, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | r1 := @this: java.text.AttributeEntry
1530, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r0 = new java.lang.StringBuilder
1532, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
1534, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r2 = r1.<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute key>
1536, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r3 = virtualinvoke $r2.<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>()
1538, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
1540, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=")
1542, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r6 = r1.<java.text.AttributeEntry: java.lang.Object value>
1544, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>()
1546, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
1548, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
1550, <org.apache.commons.csv.CSVFormat: java.lang.String toString()> | return $r9
1551, <org.apache.commons.csv.CSVPrinter: void close()> | r0 := @this: java.io.FileDescriptor
1552, <org.apache.commons.csv.CSVPrinter: void close()> | $r15 := @caughtexception
1553, <org.apache.commons.csv.CSVPrinter: void close()> | $r14 := @caughtexception
1554, <org.apache.commons.csv.CSVPrinter: void close()> | $r13 := @caughtexception
1555, <org.apache.commons.csv.CSVPrinter: void close()> | $r12 := @caughtexception
1556, <org.apache.commons.csv.CSVPrinter: void close()> | $r9 := @caughtexception
1557, <org.apache.commons.csv.CSVPrinter: void close()> | $r8 := @caughtexception
1558, <org.apache.commons.csv.CSVPrinter: void close()> | $r6 := @caughtexception
1560, <org.apache.commons.csv.CSVPrinter: void close()> | r1 := @parameter0: java.io.Closeable
1562, <org.apache.commons.csv.CSVPrinter: void close()> | $z0 = r0.<java.io.FileDescriptor: boolean closed>
1564, <org.apache.commons.csv.CSVPrinter: void close()> | if $z0 != 0 goto return
1566, <org.apache.commons.csv.CSVPrinter: void close()> | r0.<java.io.FileDescriptor: boolean closed> = 1
1568, <org.apache.commons.csv.CSVPrinter: void close()> | return
1570, <org.apache.commons.csv.CSVPrinter: void close()> | r17 = null
1572, <org.apache.commons.csv.CSVPrinter: void close()> | r18 = r1
1574, <org.apache.commons.csv.CSVPrinter: void close()> | r19 = null
1576, <org.apache.commons.csv.CSVPrinter: void close()> | $r2 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1578, <org.apache.commons.csv.CSVPrinter: void close()> | if $r2 == null goto (branch)
1580, <org.apache.commons.csv.CSVPrinter: void close()> | $r3 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1582, <org.apache.commons.csv.CSVPrinter: void close()> | if r18 == null goto (branch)
1584, <org.apache.commons.csv.CSVPrinter: void close()> | r20 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
1586, <org.apache.commons.csv.CSVPrinter: void close()> | $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
1588, <org.apache.commons.csv.CSVPrinter: void close()> | if $z1 == 0 goto (branch)
1590, <org.apache.commons.csv.CSVPrinter: void close()> | $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>()
1594, <org.apache.commons.csv.CSVPrinter: void close()> | r5 = (java.io.Closeable) $r4
1596, <org.apache.commons.csv.CSVPrinter: void close()> | interfaceinvoke r5.<java.io.Closeable: void close()>()
1598, <org.apache.commons.csv.CSVPrinter: void close()> | goto [?= (branch)]
1600, <org.apache.commons.csv.CSVPrinter: void close()> | goto [?= $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()]
1602, <org.apache.commons.csv.CSVPrinter: void close()> | r16 = $r15
1604, <org.apache.commons.csv.CSVPrinter: void close()> | if r17 != null goto virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1606, <org.apache.commons.csv.CSVPrinter: void close()> | r17 = r16
1608, <org.apache.commons.csv.CSVPrinter: void close()> | virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1618, <org.apache.commons.csv.CSVPrinter: void close()> | if r19 == null goto interfaceinvoke r18.<java.io.Closeable: void close()>()
1620, <org.apache.commons.csv.CSVPrinter: void close()> | if r17 == null goto return
1622, <org.apache.commons.csv.CSVPrinter: void close()> | interfaceinvoke r18.<java.io.Closeable: void close()>()
1630, <org.apache.commons.csv.CSVPrinter: void close()> | r21 = $r14
1632, <org.apache.commons.csv.CSVPrinter: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r21)
1642, <org.apache.commons.csv.CSVPrinter: void close()> | r22 = $r13
1644, <org.apache.commons.csv.CSVPrinter: void close()> | r19 = r22
1646, <org.apache.commons.csv.CSVPrinter: void close()> | throw r22
1648, <org.apache.commons.csv.CSVPrinter: void close()> | r11 = $r12
1650, <org.apache.commons.csv.CSVPrinter: void close()> | if r18 == null goto throw r11
1654, <org.apache.commons.csv.CSVPrinter: void close()> | throw r11
1660, <org.apache.commons.csv.CSVPrinter: void close()> | goto [?= throw r11]
1664, <org.apache.commons.csv.CSVPrinter: void close()> | r10 = $r9
1666, <org.apache.commons.csv.CSVPrinter: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10)
1674, <org.apache.commons.csv.CSVPrinter: void close()> | throw r17
1678, <org.apache.commons.csv.CSVPrinter: void close()> | r23 = $r8
1680, <org.apache.commons.csv.CSVPrinter: void close()> | if r17 == null goto r24 = r23
1682, <org.apache.commons.csv.CSVPrinter: void close()> | virtualinvoke r23.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r17)
1684, <org.apache.commons.csv.CSVPrinter: void close()> | r24 = r23
1688, <org.apache.commons.csv.CSVPrinter: void close()> | if r24 == null goto return
1690, <org.apache.commons.csv.CSVPrinter: void close()> | throw r24
1694, <org.apache.commons.csv.CSVPrinter: void close()> | r7 = $r6
1696, <org.apache.commons.csv.CSVPrinter: void close()> | if r17 == null goto throw r7
1700, <org.apache.commons.csv.CSVPrinter: void close()> | throw r7
1701, <org.apache.commons.csv.Lexer: void close()> | r0 := @this: java.io.FileDescriptor
1702, <org.apache.commons.csv.Lexer: void close()> | $r15 := @caughtexception
1703, <org.apache.commons.csv.Lexer: void close()> | $r14 := @caughtexception
1704, <org.apache.commons.csv.Lexer: void close()> | $r13 := @caughtexception
1705, <org.apache.commons.csv.Lexer: void close()> | $r12 := @caughtexception
1706, <org.apache.commons.csv.Lexer: void close()> | $r9 := @caughtexception
1707, <org.apache.commons.csv.Lexer: void close()> | $r8 := @caughtexception
1708, <org.apache.commons.csv.Lexer: void close()> | $r6 := @caughtexception
1710, <org.apache.commons.csv.Lexer: void close()> | r1 := @parameter0: java.io.Closeable
1712, <org.apache.commons.csv.Lexer: void close()> | $z0 = r0.<java.io.FileDescriptor: boolean closed>
1714, <org.apache.commons.csv.Lexer: void close()> | if $z0 != 0 goto return
1716, <org.apache.commons.csv.Lexer: void close()> | r0.<java.io.FileDescriptor: boolean closed> = 1
1718, <org.apache.commons.csv.Lexer: void close()> | return
1720, <org.apache.commons.csv.Lexer: void close()> | r17 = null
1722, <org.apache.commons.csv.Lexer: void close()> | r18 = r1
1724, <org.apache.commons.csv.Lexer: void close()> | r19 = null
1726, <org.apache.commons.csv.Lexer: void close()> | $r2 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1728, <org.apache.commons.csv.Lexer: void close()> | if $r2 == null goto (branch)
1730, <org.apache.commons.csv.Lexer: void close()> | $r3 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1732, <org.apache.commons.csv.Lexer: void close()> | if r18 == null goto (branch)
1734, <org.apache.commons.csv.Lexer: void close()> | r20 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
1736, <org.apache.commons.csv.Lexer: void close()> | $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
1738, <org.apache.commons.csv.Lexer: void close()> | if $z1 == 0 goto (branch)
1740, <org.apache.commons.csv.Lexer: void close()> | $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>()
1744, <org.apache.commons.csv.Lexer: void close()> | r5 = (java.io.Closeable) $r4
1746, <org.apache.commons.csv.Lexer: void close()> | interfaceinvoke r5.<java.io.Closeable: void close()>()
1748, <org.apache.commons.csv.Lexer: void close()> | goto [?= (branch)]
1750, <org.apache.commons.csv.Lexer: void close()> | goto [?= $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()]
1752, <org.apache.commons.csv.Lexer: void close()> | r16 = $r15
1754, <org.apache.commons.csv.Lexer: void close()> | if r17 != null goto virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1756, <org.apache.commons.csv.Lexer: void close()> | r17 = r16
1758, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1768, <org.apache.commons.csv.Lexer: void close()> | if r19 == null goto interfaceinvoke r18.<java.io.Closeable: void close()>()
1770, <org.apache.commons.csv.Lexer: void close()> | if r17 == null goto return
1772, <org.apache.commons.csv.Lexer: void close()> | interfaceinvoke r18.<java.io.Closeable: void close()>()
1780, <org.apache.commons.csv.Lexer: void close()> | r21 = $r14
1782, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r21)
1792, <org.apache.commons.csv.Lexer: void close()> | r22 = $r13
1794, <org.apache.commons.csv.Lexer: void close()> | r19 = r22
1796, <org.apache.commons.csv.Lexer: void close()> | throw r22
1798, <org.apache.commons.csv.Lexer: void close()> | r11 = $r12
1800, <org.apache.commons.csv.Lexer: void close()> | if r18 == null goto throw r11
1804, <org.apache.commons.csv.Lexer: void close()> | throw r11
1810, <org.apache.commons.csv.Lexer: void close()> | goto [?= throw r11]
1814, <org.apache.commons.csv.Lexer: void close()> | r10 = $r9
1816, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10)
1824, <org.apache.commons.csv.Lexer: void close()> | throw r17
1828, <org.apache.commons.csv.Lexer: void close()> | r23 = $r8
1830, <org.apache.commons.csv.Lexer: void close()> | if r17 == null goto r24 = r23
1832, <org.apache.commons.csv.Lexer: void close()> | virtualinvoke r23.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r17)
1834, <org.apache.commons.csv.Lexer: void close()> | r24 = r23
1838, <org.apache.commons.csv.Lexer: void close()> | if r24 == null goto return
1840, <org.apache.commons.csv.Lexer: void close()> | throw r24
1844, <org.apache.commons.csv.Lexer: void close()> | r7 = $r6
1846, <org.apache.commons.csv.Lexer: void close()> | if r17 == null goto throw r7
1850, <org.apache.commons.csv.Lexer: void close()> | throw r7
1851, <org.apache.commons.csv.CSVParser: void close()> | r0 := @this: java.io.FileDescriptor
1852, <org.apache.commons.csv.CSVParser: void close()> | $r15 := @caughtexception
1853, <org.apache.commons.csv.CSVParser: void close()> | $r14 := @caughtexception
1854, <org.apache.commons.csv.CSVParser: void close()> | $r13 := @caughtexception
1855, <org.apache.commons.csv.CSVParser: void close()> | $r12 := @caughtexception
1856, <org.apache.commons.csv.CSVParser: void close()> | $r9 := @caughtexception
1857, <org.apache.commons.csv.CSVParser: void close()> | $r8 := @caughtexception
1858, <org.apache.commons.csv.CSVParser: void close()> | $r6 := @caughtexception
1860, <org.apache.commons.csv.CSVParser: void close()> | r1 := @parameter0: java.io.Closeable
1862, <org.apache.commons.csv.CSVParser: void close()> | $z0 = r0.<java.io.FileDescriptor: boolean closed>
1864, <org.apache.commons.csv.CSVParser: void close()> | if $z0 != 0 goto return
1866, <org.apache.commons.csv.CSVParser: void close()> | r0.<java.io.FileDescriptor: boolean closed> = 1
1868, <org.apache.commons.csv.CSVParser: void close()> | return
1870, <org.apache.commons.csv.CSVParser: void close()> | r17 = null
1872, <org.apache.commons.csv.CSVParser: void close()> | r18 = r1
1874, <org.apache.commons.csv.CSVParser: void close()> | r19 = null
1876, <org.apache.commons.csv.CSVParser: void close()> | $r2 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1878, <org.apache.commons.csv.CSVParser: void close()> | if $r2 == null goto (branch)
1880, <org.apache.commons.csv.CSVParser: void close()> | $r3 = r0.<java.io.FileDescriptor: java.util.List otherParents>
1882, <org.apache.commons.csv.CSVParser: void close()> | if r18 == null goto (branch)
1884, <org.apache.commons.csv.CSVParser: void close()> | r20 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
1886, <org.apache.commons.csv.CSVParser: void close()> | $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
1888, <org.apache.commons.csv.CSVParser: void close()> | if $z1 == 0 goto (branch)
1890, <org.apache.commons.csv.CSVParser: void close()> | $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>()
1894, <org.apache.commons.csv.CSVParser: void close()> | r5 = (java.io.Closeable) $r4
1896, <org.apache.commons.csv.CSVParser: void close()> | interfaceinvoke r5.<java.io.Closeable: void close()>()
1898, <org.apache.commons.csv.CSVParser: void close()> | goto [?= (branch)]
1900, <org.apache.commons.csv.CSVParser: void close()> | goto [?= $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()]
1902, <org.apache.commons.csv.CSVParser: void close()> | r16 = $r15
1904, <org.apache.commons.csv.CSVParser: void close()> | if r17 != null goto virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1906, <org.apache.commons.csv.CSVParser: void close()> | r17 = r16
1908, <org.apache.commons.csv.CSVParser: void close()> | virtualinvoke r17.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r16)
1918, <org.apache.commons.csv.CSVParser: void close()> | if r19 == null goto interfaceinvoke r18.<java.io.Closeable: void close()>()
1920, <org.apache.commons.csv.CSVParser: void close()> | if r17 == null goto return
1922, <org.apache.commons.csv.CSVParser: void close()> | interfaceinvoke r18.<java.io.Closeable: void close()>()
1930, <org.apache.commons.csv.CSVParser: void close()> | r21 = $r14
1932, <org.apache.commons.csv.CSVParser: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r21)
1942, <org.apache.commons.csv.CSVParser: void close()> | r22 = $r13
1944, <org.apache.commons.csv.CSVParser: void close()> | r19 = r22
1946, <org.apache.commons.csv.CSVParser: void close()> | throw r22
1948, <org.apache.commons.csv.CSVParser: void close()> | r11 = $r12
1950, <org.apache.commons.csv.CSVParser: void close()> | if r18 == null goto throw r11
1954, <org.apache.commons.csv.CSVParser: void close()> | throw r11
1960, <org.apache.commons.csv.CSVParser: void close()> | goto [?= throw r11]
1964, <org.apache.commons.csv.CSVParser: void close()> | r10 = $r9
1966, <org.apache.commons.csv.CSVParser: void close()> | virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r10)
1974, <org.apache.commons.csv.CSVParser: void close()> | throw r17
1978, <org.apache.commons.csv.CSVParser: void close()> | r23 = $r8
1980, <org.apache.commons.csv.CSVParser: void close()> | if r17 == null goto r24 = r23
1982, <org.apache.commons.csv.CSVParser: void close()> | virtualinvoke r23.<java.io.IOException: void addSuppressed(java.lang.Throwable)>(r17)
1984, <org.apache.commons.csv.CSVParser: void close()> | r24 = r23
1988, <org.apache.commons.csv.CSVParser: void close()> | if r24 == null goto return
1990, <org.apache.commons.csv.CSVParser: void close()> | throw r24
1994, <org.apache.commons.csv.CSVParser: void close()> | r7 = $r6
1996, <org.apache.commons.csv.CSVParser: void close()> | if r17 == null goto throw r7
2000, <org.apache.commons.csv.CSVParser: void close()> | throw r7
2001, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r0 := @this: java.util.AbstractMap
2003, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r3 := @parameter0: java.lang.Object
2005, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r1 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>()
2007, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>()
2009, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r8 = null
2011, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if r3 != null goto (branch)
2013, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if r8 != null goto r11 = null
2017, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
2019, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r11 = null
2021, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if $z2 == 0 goto r11 = null
2023, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
2027, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r9 = (java.util.Map$Entry) $r6
2029, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r7 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>()
2031, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if $r7 != null goto (branch)
2033, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r8 = r9
2035, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | goto [?= (branch)]
2041, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
2045, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if $z0 == 0 goto r11 = null
2047, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
2051, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r10 = (java.util.Map$Entry) $r4
2053, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $r5 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>()
2055, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5)
2057, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if $z1 == 0 goto (branch)
2059, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r8 = r10
2067, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | if r8 == null goto return r11
2069, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>()
2071, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | return r11
2073, <org.apache.commons.csv.CSVParser$CSVRecordIterator: void remove()> | interfaceinvoke r2.<java.util.Iterator: void remove()>()
2076, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | r0 := @this: org.apache.commons.csv.CSVPrinter
2078, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void close(boolean)>(0)
2080, <org.apache.commons.csv.CSVPrinter: void close(boolean)> | return
2081, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0 := @this: java.io.Console$LineReader
2082, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r26 := @caughtexception
2084, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r28 := @parameter0: char[]
2086, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i0 := @parameter1: int
2088, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i1 := @parameter2: int
2090, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i36 = i0
2092, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i37 = i0 + i1
2094, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i0 < 0 goto $r29 = new java.lang.IndexOutOfBoundsException
2096, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i2 = lengthof r28
2098, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r29 = new java.lang.IndexOutOfBoundsException
2100, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i0 > $i2 goto $r29 = new java.lang.IndexOutOfBoundsException
2102, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i1 < 0 goto $r29 = new java.lang.IndexOutOfBoundsException
2106, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i37 < 0 goto $r29 = new java.lang.IndexOutOfBoundsException
2110, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i3 = lengthof r28
2114, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i37 <= $i3 goto $r1 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2118, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r1 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2120, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | specialinvoke $r29.<java.lang.IndexOutOfBoundsException: void <init>()>()
2122, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | throw $r29
2124, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r2 = staticinvoke <java.io.Console: java.lang.Object access$000(java.io.Console)>($r1)
2126, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r3 = $r2
2128, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | entermonitor $r2
2130, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | z1 = 0
2132, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | z2 = 0
2134, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i5 = r0.<java.io.Console$LineReader: int nextChar>
2136, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i4 = r0.<java.io.Console$LineReader: int nChars>
2138, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $i5 < $i4 goto $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>
2140, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | z3 = 0
2142, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>
2144, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r22 = r0.<java.io.Console$LineReader: java.io.Reader in>
2146, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r21 = r0.<java.io.Console$LineReader: char[] cb>
2148, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r20 = r0.<java.io.Console$LineReader: char[] cb>
2150, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i28 = lengthof $r20
2152, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i38 = virtualinvoke $r22.<java.io.Reader: int read(char[],int,int)>($r21, 0, $i28)
2154, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i38 == 0 goto $r22 = r0.<java.io.Console$LineReader: java.io.Reader in>
2156, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i38 <= 0 goto $i29 = i36 - i0
2160, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nChars> = i38
2162, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i29 = i36 - i0
2164, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nextChar> = 0
2166, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r23 = r0.<java.io.Console$LineReader: char[] cb>
2168, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i31 = lengthof $r23
2170, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i38 >= $i31 goto $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>
2172, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r24 = r0.<java.io.Console$LineReader: char[] cb>
2176, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i32 = i38 - 1
2178, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c33 = $r24[$i32]
2180, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $c33 == 10 goto $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>
2182, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r25 = r0.<java.io.Console$LineReader: char[] cb>
2186, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i34 = i38 - 1
2188, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c35 = $r25[$i34]
2190, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $c35 == 13 goto $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>
2192, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | z1 = 1
2196, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= $z4 = r0.<java.io.Console$LineReader: boolean leftoverLF>]
2200, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $i29 != 0 goto $i30 = i36 - i0
2202, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | exitmonitor r3
2204, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i30 = i36 - i0
2206, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return -1
2210, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i30
2212, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $z4 == 0 goto r0.<java.io.Console$LineReader: boolean leftoverLF> = 0
2214, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r17 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2216, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: boolean leftoverLF> = 0
2218, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r18 = staticinvoke <java.io.Console: char[] access$100(java.io.Console)>($r17)
2220, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if r28 != $r18 goto r0.<java.io.Console$LineReader: boolean leftoverLF> = 0
2222, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r19 = r0.<java.io.Console$LineReader: char[] cb>
2226, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i24 = r0.<java.io.Console$LineReader: int nextChar>
2228, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c25 = $r19[$i24]
2230, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $c25 != 10 goto r0.<java.io.Console$LineReader: boolean leftoverLF> = 0
2232, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i26 = r0.<java.io.Console$LineReader: int nextChar>
2236, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i27 = $i26 + 1
2238, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nextChar> = $i27
2242, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i39 = r0.<java.io.Console$LineReader: int nextChar>
2244, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i40 = r0.<java.io.Console$LineReader: int nChars>
2246, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $i39 >= $i40 goto (branch)
2248, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i7 = i36
2250, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if z1 == 0 goto $i5 = r0.<java.io.Console$LineReader: int nextChar>
2252, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i36 = i36 + 1
2254, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r4 = r0.<java.io.Console$LineReader: char[] cb>
2256, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i8 = r0.<java.io.Console$LineReader: int nextChar>
2258, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c9 = $r4[$i8]
2260, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r28[$i7] = $c9
2262, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | c41 = $c9
2264, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r5 = r0.<java.io.Console$LineReader: char[] cb>
2266, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i10 = r0.<java.io.Console$LineReader: int nextChar>
2268, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i11 = $i10 + 1
2270, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nextChar> = $i11
2272, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r5[$i10] = 0
2274, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if c41 != 10 goto (branch)
2276, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i23 = i36 - i0
2278, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if c41 != 13 goto (branch)
2282, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i23
2284, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i36 != i37 goto $i14 = r0.<java.io.Console$LineReader: int nextChar>
2286, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if i36 != i37 goto $i39 = r0.<java.io.Console$LineReader: int nextChar>
2288, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r14 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2290, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i14 = r0.<java.io.Console$LineReader: int nextChar>
2292, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r15 = staticinvoke <java.io.Console: char[] access$100(java.io.Console)>($r14)
2294, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if r28 != $r15 goto r0.<java.io.Console$LineReader: boolean leftoverLF> = 1
2296, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r16 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2298, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: boolean leftoverLF> = 1
2300, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r28 = staticinvoke <java.io.Console: char[] access$200(java.io.Console)>($r16)
2302, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i42 = lengthof r28
2304, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= $i14 = r0.<java.io.Console$LineReader: int nextChar>]
2308, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i22 = i36 - i0
2312, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i22
2314, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i13 = r0.<java.io.Console$LineReader: int nChars>
2316, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $i14 != $i13 goto $i43 = r0.<java.io.Console$LineReader: int nextChar>
2318, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r10 = r0.<java.io.Console$LineReader: java.io.Reader in>
2320, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i43 = r0.<java.io.Console$LineReader: int nextChar>
2322, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $z0 = virtualinvoke $r10.<java.io.Reader: boolean ready()>()
2324, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $z0 == 0 goto $i43 = r0.<java.io.Console$LineReader: int nextChar>
2326, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r13 = r0.<java.io.Console$LineReader: java.io.Reader in>
2330, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r12 = r0.<java.io.Console$LineReader: char[] cb>
2332, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r11 = r0.<java.io.Console$LineReader: char[] cb>
2334, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i20 = lengthof $r11
2336, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i21 = virtualinvoke $r13.<java.io.Reader: int read(char[],int,int)>($r12, 0, $i20)
2338, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nChars> = $i21
2344, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i44 = r0.<java.io.Console$LineReader: int nChars>
2346, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $i43 >= $i44 goto $i45 = i36 - i0
2348, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r9 = r0.<java.io.Console$LineReader: char[] cb>
2350, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i45 = i36 - i0
2352, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i15 = r0.<java.io.Console$LineReader: int nextChar>
2354, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $c16 = $r9[$i15]
2356, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if $c16 != 10 goto $i45 = i36 - i0
2358, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i17 = i36
2364, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r28[$i17] = 10
2366, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i18 = r0.<java.io.Console$LineReader: int nextChar>
2368, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i19 = $i18 + 1
2370, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r0.<java.io.Console$LineReader: int nextChar> = $i19
2376, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i45
2378, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r6 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2382, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r7 = staticinvoke <java.io.Console: char[] access$100(java.io.Console)>($r6)
2384, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | if r28 != $r7 goto $i12 = i36 - i0
2386, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $r8 = r0.<java.io.Console$LineReader: java.io.Console this$0>
2388, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i12 = i36 - i0
2390, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r28 = staticinvoke <java.io.Console: char[] access$200(java.io.Console)>($r8)
2392, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | i37 = lengthof r28
2394, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | goto [?= $i39 = r0.<java.io.Console$LineReader: int nextChar>]
2400, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i12
2402, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | $i6 = i36 - i0
2408, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | return $i6
2410, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | r27 = $r26
2414, <org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)> | throw r27
2415, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r0 := @this: org.apache.commons.csv.Lexer
2417, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r1 := @parameter0: org.apache.commons.csv.Token
2419, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i6 := @parameter1: int
2421, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
2423, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2425, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
2427, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2429, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
2431, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
2433, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
2435, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2437, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
2439, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2441, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
2443, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
2449, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2451, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2453, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2455, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
2461, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2463, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
2465, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2467, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2469, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2471, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2473, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
2475, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
2477, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
2479, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2481, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2483, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2485, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2487, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $c3 = (char) i6
2489, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
2491, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2493, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
2495, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $c5 = (char) $i4
2497, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
2499, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= (branch)]
2503, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $c2 = (char) i1
2505, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2511, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $c0 = (char) i6
2513, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
2517, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
2519, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
2523, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | if $z5 == 0 goto return r1
2525, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2527, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | return r1
2529, <org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
2532, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r0 := @this: org.apache.commons.csv.Lexer
2534, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1 := @parameter0: org.apache.commons.csv.Token
2536, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i6 := @parameter1: int
2538, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
2540, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2542, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
2544, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2546, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
2548, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
2550, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
2552, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2554, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
2556, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2558, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
2560, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
2566, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2568, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2570, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2572, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
2578, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2580, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
2582, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2584, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2586, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2588, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2590, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
2592, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
2594, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
2596, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2598, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2600, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2602, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2604, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c3 = (char) i6
2606, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
2608, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2610, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
2612, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c5 = (char) $i4
2614, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
2616, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= (branch)]
2620, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c2 = (char) i1
2622, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2628, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $c0 = (char) i6
2630, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
2634, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
2636, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
2640, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | if $z5 == 0 goto return r1
2642, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2644, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | return r1
2646, <org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
2649, <org.apache.commons.csv.Lexer: int readEscape()> | r0 := @this: org.apache.commons.csv.Lexer
2651, <org.apache.commons.csv.Lexer: int readEscape()> | r1 := @parameter0: org.apache.commons.csv.Token
2653, <org.apache.commons.csv.Lexer: int readEscape()> | i6 := @parameter1: int
2655, <org.apache.commons.csv.Lexer: int readEscape()> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
2657, <org.apache.commons.csv.Lexer: int readEscape()> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2659, <org.apache.commons.csv.Lexer: int readEscape()> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
2661, <org.apache.commons.csv.Lexer: int readEscape()> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2663, <org.apache.commons.csv.Lexer: int readEscape()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
2665, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
2667, <org.apache.commons.csv.Lexer: int readEscape()> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
2669, <org.apache.commons.csv.Lexer: int readEscape()> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2671, <org.apache.commons.csv.Lexer: int readEscape()> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
2673, <org.apache.commons.csv.Lexer: int readEscape()> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2675, <org.apache.commons.csv.Lexer: int readEscape()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
2677, <org.apache.commons.csv.Lexer: int readEscape()> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
2683, <org.apache.commons.csv.Lexer: int readEscape()> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2685, <org.apache.commons.csv.Lexer: int readEscape()> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2687, <org.apache.commons.csv.Lexer: int readEscape()> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2689, <org.apache.commons.csv.Lexer: int readEscape()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
2695, <org.apache.commons.csv.Lexer: int readEscape()> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2697, <org.apache.commons.csv.Lexer: int readEscape()> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
2699, <org.apache.commons.csv.Lexer: int readEscape()> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2701, <org.apache.commons.csv.Lexer: int readEscape()> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2703, <org.apache.commons.csv.Lexer: int readEscape()> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2705, <org.apache.commons.csv.Lexer: int readEscape()> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2707, <org.apache.commons.csv.Lexer: int readEscape()> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
2709, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
2711, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
2713, <org.apache.commons.csv.Lexer: int readEscape()> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2715, <org.apache.commons.csv.Lexer: int readEscape()> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2717, <org.apache.commons.csv.Lexer: int readEscape()> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2719, <org.apache.commons.csv.Lexer: int readEscape()> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2721, <org.apache.commons.csv.Lexer: int readEscape()> | $c3 = (char) i6
2723, <org.apache.commons.csv.Lexer: int readEscape()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
2725, <org.apache.commons.csv.Lexer: int readEscape()> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2727, <org.apache.commons.csv.Lexer: int readEscape()> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
2729, <org.apache.commons.csv.Lexer: int readEscape()> | $c5 = (char) $i4
2731, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
2733, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= (branch)]
2737, <org.apache.commons.csv.Lexer: int readEscape()> | $c2 = (char) i1
2739, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2745, <org.apache.commons.csv.Lexer: int readEscape()> | $c0 = (char) i6
2747, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
2751, <org.apache.commons.csv.Lexer: int readEscape()> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
2753, <org.apache.commons.csv.Lexer: int readEscape()> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
2757, <org.apache.commons.csv.Lexer: int readEscape()> | if $z5 == 0 goto return r1
2759, <org.apache.commons.csv.Lexer: int readEscape()> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2761, <org.apache.commons.csv.Lexer: int readEscape()> | return r1
2763, <org.apache.commons.csv.Lexer: int readEscape()> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
2766, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r0 := @this: org.apache.commons.csv.Lexer
2768, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1 := @parameter0: org.apache.commons.csv.Token
2770, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i6 := @parameter1: int
2772, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
2774, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2776, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
2778, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2780, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
2782, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
2784, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
2786, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2788, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
2790, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2792, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
2794, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
2800, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2802, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2804, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2806, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
2812, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2814, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
2816, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2818, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2820, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2822, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2824, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
2826, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
2828, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
2830, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2832, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2834, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2836, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2838, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c3 = (char) i6
2840, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
2842, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2844, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
2846, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c5 = (char) $i4
2848, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
2850, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= (branch)]
2854, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c2 = (char) i1
2856, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2862, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $c0 = (char) i6
2864, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
2868, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
2870, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
2874, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | if $z5 == 0 goto return r1
2876, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2878, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | return r1
2880, <org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
2883, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r0 := @this: org.apache.commons.csv.Lexer
2885, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1 := @parameter0: org.apache.commons.csv.Token
2887, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i6 := @parameter1: int
2889, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
2891, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2893, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
2895, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
2897, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
2899, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
2901, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
2903, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2905, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
2907, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
2909, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
2911, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
2917, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2919, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
2921, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
2923, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
2929, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2931, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
2933, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2935, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2937, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2939, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
2941, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
2943, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
2945, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
2947, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2949, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2951, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2953, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2955, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c3 = (char) i6
2957, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
2959, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
2961, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
2963, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c5 = (char) $i4
2965, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
2967, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= (branch)]
2971, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c2 = (char) i1
2973, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
2979, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $c0 = (char) i6
2981, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
2985, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
2987, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
2991, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | if $z5 == 0 goto return r1
2993, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
2995, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | return r1
2997, <org.apache.commons.csv.Lexer: boolean isEscape(int)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
3000, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r0 := @this: org.apache.commons.csv.Lexer
3002, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r1 := @parameter0: org.apache.commons.csv.Token
3004, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i6 := @parameter1: int
3006, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
3008, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
3010, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3012, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
3014, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3016, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
3018, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3020, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
3022, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3024, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
3026, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
3028, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
3034, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
3036, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3038, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
3040, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
3046, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3048, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
3050, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3052, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
3054, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3056, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
3058, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3060, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
3062, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
3064, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3066, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3068, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3070, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3072, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c3 = (char) i6
3074, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
3076, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3078, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3080, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c5 = (char) $i4
3082, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
3084, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= (branch)]
3088, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c2 = (char) i1
3090, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
3096, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $c0 = (char) i6
3098, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
3102, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3104, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
3108, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | if $z5 == 0 goto return r1
3110, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3112, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | return r1
3114, <org.apache.commons.csv.Lexer: boolean isDelimiter(int)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
3117, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r0 := @this: org.apache.commons.csv.Lexer
3119, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r1 := @parameter0: org.apache.commons.csv.Token
3121, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i6 := @parameter1: int
3123, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)
3125, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z0 == 0 goto $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
3127, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3129, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i6)
3131, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3133, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>]
3135, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z5 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3137, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z1 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
3139, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r15 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3141, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i6)
3143, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r15
3145, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r1.<org.apache.commons.csv.Token: boolean isReady> = 1
3151, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z2 == 0 goto $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
3153, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r13 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3155, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z3 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscape(int)>(i6)
3157, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | r1.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r13
3163, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z3 == 0 goto $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3165, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEscapeDelimiter()>()
3167, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r2 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3169, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z4 == 0 goto i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
3171, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r11 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3173, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: int readEscape()>()
3175, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3177, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r10)
3179, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>]
3181, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r17 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3183, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if i1 != -1 goto $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3185, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r6 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3187, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r4 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3189, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $c3 = (char) i6
3191, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)
3193, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r8 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3195, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $i4 = virtualinvoke $r8.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3197, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $c5 = (char) $i4
3199, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
3201, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= (branch)]
3205, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $c2 = (char) i1
3207, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)
3213, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $c0 = (char) i6
3215, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
3219, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | i6 = virtualinvoke $r17.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3221, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | goto [?= $z0 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i6)]
3225, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | if $z5 == 0 goto return r1
3227, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | $r14 = r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3229, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | return r1
3231, <org.apache.commons.csv.Lexer: boolean isEndOfFile(int)> | virtualinvoke r0.<org.apache.commons.csv.Lexer: void trimTrailingSpaces(java.lang.StringBuilder)>($r14)
3234, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r0 := @this: org.apache.commons.csv.CSVParser
3236, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | z1 := @parameter0: boolean
3238, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3240, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3242, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
3244, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3246, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
3248, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z0 == 0 goto $r7 = r3
3250, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
3252, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r7 = r3
3254, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | goto [?= r5 = $r7]
3256, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | r5 = $r7
3260, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3262, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
3264, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3266, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3268, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3272, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
3274, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3276, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | return
3280, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
3282, <org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
3285, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r0 := @this: org.apache.commons.csv.CSVParser
3287, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | z1 := @parameter0: boolean
3289, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3291, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3293, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
3295, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3297, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
3299, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z0 == 0 goto $r7 = r3
3301, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
3303, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r7 = r3
3305, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | goto [?= r5 = $r7]
3307, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | r5 = $r7
3311, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3313, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
3315, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3317, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3319, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3323, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
3325, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3327, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | return
3331, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
3333, <org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
3336, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r0 := @this: org.apache.commons.csv.CSVParser
3338, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | z1 := @parameter0: boolean
3340, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3342, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r2 = $r1.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3344, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
3346, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3348, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z0 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: boolean getTrim()>()
3350, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z0 == 0 goto $r7 = r3
3352, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r7 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
3354, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r7 = r3
3356, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | goto [?= r5 = $r7]
3358, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | r5 = $r7
3362, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if z1 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3364, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>()
3366, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3368, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z3 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3370, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r6 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3374, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $z4 = virtualinvoke $r6.<org.apache.commons.csv.CSVFormat: boolean getTrailingDelimiter()>()
3376, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | if $z4 == 0 goto $r8 = r0.<org.apache.commons.csv.CSVParser: java.util.List recordList>
3378, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | return
3382, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | $r9 = specialinvoke r0.<org.apache.commons.csv.CSVParser: java.lang.String handleNull(java.lang.String)>(r5)
3384, <org.apache.commons.csv.CSVFormat: boolean getTrim()> | interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9)
3387, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | r0 := @this: org.apache.commons.csv.CSVPrinter
3389, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | z0 := @parameter0: boolean
3391, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
3393, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
3395, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
3397, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
3399, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3403, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3407, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $z2 = $r4 instanceof java.io.Closeable
3409, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | if $z2 == 0 goto return
3411, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3413, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | return
3415, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | $r2 = (java.io.Closeable) $r1
3417, <org.apache.commons.csv.CSVFormat: boolean getAutoFlush()> | interfaceinvoke $r2.<java.io.Closeable: void close()>()
3420, <org.apache.commons.csv.CSVPrinter: void flush()> | r0 := @this: org.apache.commons.csv.CSVPrinter
3422, <org.apache.commons.csv.CSVPrinter: void flush()> | z0 := @parameter0: boolean
3424, <org.apache.commons.csv.CSVPrinter: void flush()> | if z0 != 0 goto virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
3426, <org.apache.commons.csv.CSVPrinter: void flush()> | $r3 = r0.<org.apache.commons.csv.CSVPrinter: org.apache.commons.csv.CSVFormat format>
3428, <org.apache.commons.csv.CSVPrinter: void flush()> | virtualinvoke r0.<org.apache.commons.csv.CSVPrinter: void flush()>()
3430, <org.apache.commons.csv.CSVPrinter: void flush()> | $z1 = virtualinvoke $r3.<org.apache.commons.csv.CSVFormat: boolean getAutoFlush()>()
3432, <org.apache.commons.csv.CSVPrinter: void flush()> | if $z1 == 0 goto $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3436, <org.apache.commons.csv.CSVPrinter: void flush()> | $r4 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3440, <org.apache.commons.csv.CSVPrinter: void flush()> | $z2 = $r4 instanceof java.io.Closeable
3442, <org.apache.commons.csv.CSVPrinter: void flush()> | if $z2 == 0 goto return
3444, <org.apache.commons.csv.CSVPrinter: void flush()> | $r1 = r0.<org.apache.commons.csv.CSVPrinter: java.lang.Appendable appendable>
3446, <org.apache.commons.csv.CSVPrinter: void flush()> | return
3448, <org.apache.commons.csv.CSVPrinter: void flush()> | $r2 = (java.io.Closeable) $r1
3450, <org.apache.commons.csv.CSVPrinter: void flush()> | interfaceinvoke $r2.<java.io.Closeable: void close()>()
3453, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | r0 := @this: org.apache.commons.csv.Lexer
3455, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i0 := @parameter0: int
3457, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r1 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3459, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c1 = $r1[0]
3461, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i0 == $c1 goto $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3463, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return 0
3465, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r2 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3467, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i2 = lengthof $r2
3469, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if $i2 != 1 goto $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3471, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return 1
3473, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r4 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3475, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r3 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
3477, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | virtualinvoke $r4.<org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])>($r3)
3479, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i8 = 0
3481, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
3483, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i3 = lengthof $r6
3485, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i8 >= $i3 goto $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3487, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r10 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
3489, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r9 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3491, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c7 = $r10[i8]
3493, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r11 = r0.<org.apache.commons.csv.Lexer: char[] delimiter>
3495, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i5 = i8 + 1
3497, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $c6 = $r11[$i5]
3499, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if $c7 == $c6 goto i8 = i8 + 1
3503, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i8 = i8 + 1
3505, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | goto [?= $r6 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>]
3509, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r8 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
3511, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $r7 = r0.<org.apache.commons.csv.Lexer: char[] delimiterBuf>
3513, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $i4 = lengthof $r7
3515, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | i9 = virtualinvoke $r9.<org.apache.commons.csv.ExtendedBufferedReader: int read(char[],int,int)>($r8, 0, $i4)
3517, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | if i9 == -1 goto $z0 = 0
3519, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $z0 = 1
3521, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | $z0 = 0
3523, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | goto [?= return $z0]
3525, <org.apache.commons.csv.ExtendedBufferedReader: char[] lookAhead(char[])> | return $z0
3528, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r0 := @this: org.apache.commons.csv.CSVParser
3530, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r4 := @parameter0: java.lang.String
3532, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3534, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
3536, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3538, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
3540, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
3542, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
3544, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if $z2 == 0 goto (branch)
3546, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z1 == 0 goto $r5 = null
3548, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z1 == 0 goto $r6 = r4
3550, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z0 == 0 goto $r5 = null
3552, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r5 = null
3554, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r5 = r4
3558, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | goto [?= return $r5]
3560, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | return $r5
3564, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if r3 != null goto $r6 = r4
3566, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r6 = r4
3568, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
3572, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if $z3 == 0 goto $r6 = r4
3574, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | if z0 != 0 goto $r6 = r4
3578, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | $r6 = null
3582, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | goto [?= return $r6]
3584, <org.apache.commons.csv.CSVFormat: java.lang.String getNullString()> | return $r6
3587, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r0 := @this: org.apache.commons.csv.CSVParser
3589, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r4 := @parameter0: java.lang.String
3591, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Token reusableToken>
3593, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | z0 = $r1.<org.apache.commons.csv.Token: boolean isQuoted>
3595, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r2 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
3597, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | r3 = virtualinvoke $r2.<org.apache.commons.csv.CSVFormat: java.lang.String getNullString()>()
3599, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | z1 = specialinvoke r0.<org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()>()
3601, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)
3603, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $z2 == 0 goto (branch)
3605, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z1 == 0 goto $r5 = null
3607, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z1 == 0 goto $r6 = r4
3609, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z0 == 0 goto $r5 = null
3611, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r5 = null
3613, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r5 = r4
3617, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | goto [?= return $r5]
3619, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | return $r5
3623, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if r3 != null goto $r6 = r4
3625, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r6 = r4
3627, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
3631, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if $z3 == 0 goto $r6 = r4
3633, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | if z0 != 0 goto $r6 = r4
3637, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | $r6 = null
3641, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | goto [?= return $r6]
3643, <org.apache.commons.csv.CSVParser: boolean isStrictQuoteMode()> | return $r6
3646, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
3648, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | $r1 = virtualinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()>()
3650, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord next()> | return $r1
3651, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | r0 := @this: org.apache.commons.csv.CSVParser$CSVRecordIterator
3653, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r1 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVParser this$0>
3655, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.CSVParser: boolean isClosed()>()
3657, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $z0 == 0 goto $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3659, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | return 0
3661, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r2 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3663, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $r2 != null goto $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3665, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r4 = specialinvoke r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()>()
3667, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $r3 = r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current>
3669, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | r0.<org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord current> = $r4
3673, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | if $r3 == null goto $z1 = 0
3675, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z1 = 1
3677, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | $z1 = 0
3679, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | goto [?= return $z1]
3681, <org.apache.commons.csv.CSVParser$CSVRecordIterator: org.apache.commons.csv.CSVRecord getNextRecord()> | return $z1
3684, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | r0 := @this: org.apache.commons.csv.Lexer
3686, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3688, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | $z0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()>()
3690, <org.apache.commons.csv.ExtendedBufferedReader: boolean isClosed()> | return $z0
3691, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.CSVParser
3693, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.Lexer lexer>
3695, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.Lexer: long getCurrentLineNumber()>()
3697, <org.apache.commons.csv.Lexer: long getCurrentLineNumber()> | return $l0
3698, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r0 := @this: org.apache.commons.csv.Lexer
3700, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3 := @parameter0: org.apache.commons.csv.Token
3702, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3704, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3706, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3708, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3710, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3712, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3714, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3716, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3718, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3720, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3724, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3726, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i1 = i2
3730, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3732, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3736, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3738, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z11 == 0 goto (branch)
3740, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3744, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
3746, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | return r3
3748, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3750, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
3752, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3754, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3756, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3758, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3760, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3766, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
3770, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3772, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
3774, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3776, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3778, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3782, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
3784, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3786, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3788, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3790, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
3794, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3796, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
3798, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
3800, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3804, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
3806, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $r20 != $r21 goto return r3
3808, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
3812, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3814, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $c0 = (char) i2
3816, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3818, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
3820, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3822, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3826, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3828, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
3832, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3836, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3840, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= $c0 = (char) i2]
3844, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z14 == 0 goto (branch)
3846, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
3848, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3850, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
3852, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
3856, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
3858, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
3860, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
3866, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3868, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
3870, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3876, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3878, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3880, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
3882, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
3884, <org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
3893, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r0 := @this: org.apache.commons.csv.Lexer
3895, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3 := @parameter0: org.apache.commons.csv.Token
3897, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3899, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
3901, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3903, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3905, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
3907, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
3909, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3911, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3913, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3915, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3919, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
3921, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i1 = i2
3925, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3927, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
3931, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3933, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z11 == 0 goto (branch)
3935, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3939, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
3941, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | return r3
3943, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3945, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
3947, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3949, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3951, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
3953, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3955, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
3961, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
3965, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3967, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
3969, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3971, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
3973, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
3977, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
3979, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3981, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
3983, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
3985, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
3989, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
3991, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
3993, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
3995, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
3999, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4001, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $r20 != $r21 goto return r3
4003, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4007, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4009, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $c0 = (char) i2
4011, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4013, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4015, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4017, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4021, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4023, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4027, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4031, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4035, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | goto [?= $c0 = (char) i2]
4039, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z14 == 0 goto (branch)
4041, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4043, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4045, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4047, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4051, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4053, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4055, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4061, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4063, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4065, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4071, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4073, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4075, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4077, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4079, <org.apache.commons.csv.Lexer: boolean isQuoteChar(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4088, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r0 := @this: org.apache.commons.csv.Lexer
4090, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4092, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4094, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4096, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4098, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4100, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4102, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4104, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4106, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4108, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4110, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4114, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4116, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i1 = i2
4120, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4122, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4126, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4128, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z11 == 0 goto (branch)
4130, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4134, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4136, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | return r3
4138, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4140, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4142, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4144, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4146, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4148, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4150, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4156, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4160, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4162, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4164, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4166, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4168, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4172, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4174, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4176, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4178, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4180, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4184, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4186, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4188, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4190, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4194, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4196, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $r20 != $r21 goto return r3
4198, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4202, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4204, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $c0 = (char) i2
4206, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4208, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4210, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4212, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4216, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4218, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4222, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4226, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4230, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | goto [?= $c0 = (char) i2]
4234, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z14 == 0 goto (branch)
4236, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4238, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4240, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4242, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4246, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4248, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4250, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4256, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4258, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4260, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4266, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4268, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4270, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4272, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4274, <org.apache.commons.csv.Lexer: boolean isCommentStart(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4283, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r0 := @this: org.apache.commons.csv.Lexer
4285, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3 := @parameter0: org.apache.commons.csv.Token
4287, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4289, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i1 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int getLastChar()>()
4291, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r2 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4293, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r2.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4295, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | z12 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean readEndOfLine(int)>(i2)
4297, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z0 = r0.<org.apache.commons.csv.Lexer: boolean ignoreEmptyLines>
4299, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z0 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4301, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4303, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4305, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z10 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4309, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z10 == 0 goto $z13 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i1)
4311, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i1 = i2
4315, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r18 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4317, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r18.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4321, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z11 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4323, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z11 == 0 goto (branch)
4325, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r19 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4329, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r19
4331, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | return r3
4333, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z13 != 0 goto $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4335, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z1 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i1)
4337, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r4 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4339, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z1 != 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4341, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z9 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4343, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4345, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z9 == 0 goto $z2 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isStartOfLine(int)>(i1)
4351, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r4
4355, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z2 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4357, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z8 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isCommentStart(int)>(i2)
4359, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4361, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z8 == 0 goto $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>
4363, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r11 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4367, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r12 = virtualinvoke $r11.<org.apache.commons.csv.ExtendedBufferedReader: java.lang.String readLine()>()
4369, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if r12 != null goto r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4371, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r17 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4373, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>()
4375, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r17
4379, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r14 = r3.<org.apache.commons.csv.Token: java.lang.StringBuilder content>
4381, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
4383, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r16 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type COMMENT>
4385, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r16
4389, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r21 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type INVALID>
4391, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $r20 != $r21 goto return r3
4393, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z3 = r0.<org.apache.commons.csv.Lexer: boolean ignoreSurroundingSpaces>
4397, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z3 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4399, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $c0 = (char) i2
4401, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4403, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z6 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0)
4405, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z6 == 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4407, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z7 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4411, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z7 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4413, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 != 0 goto $z14 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isDelimiter(int)>(i2)
4417, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r10 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4421, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | i2 = virtualinvoke $r10.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
4425, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | goto [?= $c0 = (char) i2]
4429, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z14 == 0 goto (branch)
4431, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r9 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type TOKEN>
4433, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if z12 == 0 goto $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4435, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r9
4437, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | goto [?= $r20 = r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type>]
4441, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r8 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EORECORD>
4443, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z4 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isQuoteChar(int)>(i2)
4445, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r8
4451, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z4 == 0 goto $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4453, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token)>(r3)
4455, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $z5 = virtualinvoke r0.<org.apache.commons.csv.Lexer: boolean isEndOfFile(int)>(i2)
4461, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | if $z5 == 0 goto specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4463, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | $r6 = <org.apache.commons.csv.Token$Type: org.apache.commons.csv.Token$Type EOF>
4465, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | specialinvoke r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token,int)>(r3, i2)
4467, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: org.apache.commons.csv.Token$Type type> = $r6
4469, <org.apache.commons.csv.Lexer: boolean isStartOfLine(int)> | r3.<org.apache.commons.csv.Token: boolean isReady> = 1
4478, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | r0 := @this: org.apache.commons.csv.Lexer
4480, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
4482, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getPosition()>()
4484, <org.apache.commons.csv.ExtendedBufferedReader: long getPosition()> | return $l0
4485, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | r3 := @this: org.apache.commons.csv.CSVFormat
4487, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r0 = new java.lang.StringBuilder
4489, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
4491, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | r1 = $r0
4493, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
4495, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
4497, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
4499, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4501, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
4503, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4505, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
4507, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4509, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
4511, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
4513, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
4515, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4519, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4523, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4525, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
4527, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
4529, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
4531, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4535, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4539, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4541, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
4543, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4545, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
4547, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4551, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4555, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4557, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
4559, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
4561, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
4563, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4567, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4571, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4573, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
4575, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
4577, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
4579, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4583, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4587, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4589, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
4591, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4593, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
4595, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4599, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4601, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
4603, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4607, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4609, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
4611, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4615, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4617, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
4619, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4623, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
4625, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
4627, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4629, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4633, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4635, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
4637, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4639, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
4641, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
4645, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
4649, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
4651, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
4653, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4655, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
4657, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
4661, <org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()> | return $r13
4662, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | r3 := @this: org.apache.commons.csv.CSVFormat
4664, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r0 = new java.lang.StringBuilder
4666, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
4668, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | r1 = $r0
4670, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
4672, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
4674, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
4676, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4678, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
4680, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4682, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
4684, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4686, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
4688, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
4690, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
4692, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4696, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4700, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4702, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
4704, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
4706, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
4708, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4712, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4716, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4718, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
4720, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4722, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
4724, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4728, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4732, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4734, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
4736, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
4738, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
4740, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4744, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4748, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4750, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
4752, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
4754, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
4756, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4760, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4764, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4766, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
4768, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4770, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
4772, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4776, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4778, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
4780, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4784, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4786, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
4788, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4792, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4794, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
4796, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4800, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
4802, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
4804, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4806, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4810, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4812, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
4814, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4816, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
4818, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
4822, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
4826, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
4828, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
4830, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4832, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
4834, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
4838, <org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()> | return $r13
4839, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | r3 := @this: org.apache.commons.csv.CSVFormat
4841, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r0 = new java.lang.StringBuilder
4843, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
4845, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | r1 = $r0
4847, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
4849, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
4851, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
4853, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4855, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
4857, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4859, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
4861, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
4863, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
4865, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
4867, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
4869, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4873, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4877, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4879, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
4881, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
4883, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
4885, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4889, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4893, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
4895, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
4897, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
4899, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
4901, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4905, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4909, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
4911, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
4913, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
4915, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
4917, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4921, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4925, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4927, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
4929, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
4931, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
4933, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4937, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4941, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
4943, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
4945, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
4947, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
4949, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
4953, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4955, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
4957, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
4961, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4963, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
4965, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
4969, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4971, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
4973, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
4977, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
4979, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
4981, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4983, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4987, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
4989, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
4991, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
4993, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
4995, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
4999, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5003, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5005, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
5007, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5009, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
5011, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
5015, <org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()> | return $r13
5016, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
5018, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r0 = new java.lang.StringBuilder
5020, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
5022, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | r1 = $r0
5024, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
5026, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
5028, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
5030, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5032, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
5034, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5036, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
5038, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5040, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
5042, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
5044, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
5046, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5050, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5054, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5056, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
5058, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
5060, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
5062, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5066, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5070, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5072, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
5074, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5076, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
5078, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5082, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5086, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5088, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
5090, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
5092, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
5094, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5098, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5102, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5104, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
5106, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
5108, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
5110, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5114, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5118, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5120, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
5122, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5124, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
5126, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5130, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5132, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
5134, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5138, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5140, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
5142, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5146, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5148, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
5150, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5154, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
5156, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
5158, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5160, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5164, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5166, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
5168, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5170, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
5172, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
5176, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5180, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5182, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
5184, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5186, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
5188, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
5192, <org.apache.commons.csv.CSVFormat: boolean isNullStringSet()> | return $r13
5193, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
5195, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r0 = new java.lang.StringBuilder
5197, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
5199, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | r1 = $r0
5201, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
5203, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
5205, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
5207, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5209, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
5211, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5213, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
5215, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5217, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
5219, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
5221, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
5223, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5227, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5231, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5233, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
5235, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
5237, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
5239, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5243, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5247, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5249, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
5251, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5253, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
5255, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5259, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5263, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5265, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
5267, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
5269, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
5271, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5275, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5279, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5281, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
5283, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
5285, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
5287, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5291, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5295, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5297, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
5299, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5301, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
5303, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5307, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5309, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
5311, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5315, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5317, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
5319, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5323, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5325, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
5327, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5331, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
5333, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
5335, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5337, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5341, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5343, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
5345, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5347, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
5349, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
5353, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5357, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5359, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
5361, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5363, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
5365, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
5369, <org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()> | return $r13
5370, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
5372, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r0 = new java.lang.StringBuilder
5374, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
5376, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | r1 = $r0
5378, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
5380, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
5382, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
5384, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5386, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
5388, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5390, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
5392, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5394, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
5396, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
5398, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
5400, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5404, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5408, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5410, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
5412, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
5414, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
5416, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5420, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5424, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5426, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
5428, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5430, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
5432, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5436, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5440, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5442, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
5444, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
5446, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
5448, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5452, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5456, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5458, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
5460, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
5462, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
5464, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5468, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5472, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5474, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
5476, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5478, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
5480, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5484, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5486, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
5488, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5492, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5494, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
5496, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5500, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5502, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
5504, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5508, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
5510, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
5512, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5514, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5518, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5520, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
5522, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5524, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
5526, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
5530, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5534, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5536, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
5538, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5540, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
5542, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
5546, <org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()> | return $r13
5547, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | r3 := @this: org.apache.commons.csv.CSVFormat
5549, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r0 = new java.lang.StringBuilder
5551, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
5553, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | r1 = $r0
5555, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter=<")
5557, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r4 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String delimiter>
5559, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
5561, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5563, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z0 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()>()
5565, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z0 == 0 goto $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5567, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32)
5569, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z1 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isQuoteCharacterSet()>()
5571, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r53 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Escape=<")
5573, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r54 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character escapeCharacter>
5575, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54)
5577, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5581, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z1 == 0 goto $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5585, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r7 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5587, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r48 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteChar=<")
5589, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r49 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character quoteCharacter>
5591, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49)
5593, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5597, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r7 == null goto $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5601, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z2 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isCommentMarkerSet()>()
5603, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r43 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("QuoteMode=<")
5605, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r44 = r3.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode quoteMode>
5607, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
5609, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5613, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z2 == 0 goto $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5617, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z3 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean isNullStringSet()>()
5619, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommentStart=<")
5621, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r39 = r3.<org.apache.commons.csv.CSVFormat: java.lang.Character commentMarker>
5623, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39)
5625, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5629, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z3 == 0 goto $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5633, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r8 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5635, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r33 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NullString=<")
5637, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r34 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String nullString>
5639, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34)
5641, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5645, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r8 == null goto $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5649, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z4 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreEmptyLines()>()
5651, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r28 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RecordSeparator=<")
5653, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r29 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String recordSeparator>
5655, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
5657, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62)
5661, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z4 == 0 goto $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5663, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EmptyLines:ignored")
5665, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z5 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreSurroundingSpaces()>()
5669, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z5 == 0 goto $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5671, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SurroundingSpaces:ignored")
5673, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z6 = virtualinvoke r3.<org.apache.commons.csv.CSVFormat: boolean getIgnoreHeaderCase()>()
5677, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $z6 == 0 goto $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5679, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IgnoreHeaderCase:ignored")
5681, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SkipHeaderRecord:")
5685, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $z7 = r3.<org.apache.commons.csv.CSVFormat: boolean skipHeaderRecord>
5687, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7)
5689, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r11 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5691, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r11 == null goto $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5695, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r12 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5697, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r20 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HeaderComments:")
5699, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r21 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] headerComments>
5701, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21)
5703, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)
5707, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | if $r12 == null goto $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5711, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
5713, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Header:")
5715, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r16 = r3.<org.apache.commons.csv.CSVFormat: java.lang.String[] header>
5717, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16)
5719, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
5723, <org.apache.commons.csv.CSVFormat: boolean isEscapeCharacterSet()> | return $r13
5724, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | r0 := @this: org.apache.commons.csv.Lexer
5726, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5728, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | i0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: int read()>()
5730, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | lookupswitch(i0) {     case -1: goto $r2 = new java.io.IOException;     case 8: goto return i0;     case 9: goto return i0;     case 10: goto return i0;     case 12: goto return i0;     case 13: goto return i0;     case 98: goto return 8;     case 102: goto return 12;     case 110: goto return 10;     case 114: goto return 13;     case 116: goto return 9;     default: goto $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0); }
5732, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $r2 = new java.io.IOException
5734, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return i0
5736, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 8
5738, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 12
5740, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 10
5742, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 13
5744, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return 9
5746, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | $z0 = specialinvoke r0.<org.apache.commons.csv.Lexer: boolean isMetaChar(int)>(i0)
5748, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("EOF whilst processing escape sequence")
5750, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | throw $r2
5752, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | if $z0 == 0 goto return -1
5756, <org.apache.commons.csv.Lexer: boolean isMetaChar(int)> | return -1
5757, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | r0 := @this: org.apache.commons.csv.CSVParser
5759, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r1 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
5761, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r2 = virtualinvoke $r1.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
5763, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r3 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode ALL_NON_NULL>
5765, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | if $r2 == $r3 goto $z0 = 1
5767, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r4 = r0.<org.apache.commons.csv.CSVParser: org.apache.commons.csv.CSVFormat format>
5769, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $z0 = 1
5771, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r5 = virtualinvoke $r4.<org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()>()
5773, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $r6 = <org.apache.commons.csv.QuoteMode: org.apache.commons.csv.QuoteMode NON_NUMERIC>
5775, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | if $r5 != $r6 goto $z0 = 0
5779, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | $z0 = 0
5781, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | goto [?= return $z0]
5783, <org.apache.commons.csv.CSVFormat: org.apache.commons.csv.QuoteMode getQuoteMode()> | return $z0
5786, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | r0 := @this: org.apache.commons.csv.Lexer
5788, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $r1 = r0.<org.apache.commons.csv.Lexer: org.apache.commons.csv.ExtendedBufferedReader reader>
5790, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | $l0 = virtualinvoke $r1.<org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()>()
5792, <org.apache.commons.csv.ExtendedBufferedReader: long getCurrentLineNumber()> | return $l0
